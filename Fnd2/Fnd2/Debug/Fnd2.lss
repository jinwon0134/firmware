
Fnd2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001e6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000976  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085e  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000133  00000000  00000000  00001c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ee       	ldi	r30, 0xE6	; 230
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	59 d0       	rcall	.+178    	; 0x166 <main>
  b4:	96 c0       	rjmp	.+300    	; 0x1e2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <display_number>:
	0x6D,0x7D,0x07,0x7F,0x6F
};

unsigned char select_digit[4] = {0x0E, 0x0D, 0x0B, 0x07};

void display_number(int num) {
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	28 97       	sbiw	r28, 0x08	; 8
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	fc 01       	movw	r30, r24
	int d[4];
	d[0] = (num / 1000) % 10;
  ce:	68 ee       	ldi	r22, 0xE8	; 232
  d0:	73 e0       	ldi	r23, 0x03	; 3
  d2:	60 d0       	rcall	.+192    	; 0x194 <__divmodhi4>
  d4:	cb 01       	movw	r24, r22
  d6:	2a e0       	ldi	r18, 0x0A	; 10
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	b9 01       	movw	r22, r18
  dc:	5b d0       	rcall	.+182    	; 0x194 <__divmodhi4>
  de:	9a 83       	std	Y+2, r25	; 0x02
  e0:	89 83       	std	Y+1, r24	; 0x01
	d[1] = (num / 100) % 10;
  e2:	cf 01       	movw	r24, r30
  e4:	64 e6       	ldi	r22, 0x64	; 100
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	55 d0       	rcall	.+170    	; 0x194 <__divmodhi4>
  ea:	cb 01       	movw	r24, r22
  ec:	b9 01       	movw	r22, r18
  ee:	52 d0       	rcall	.+164    	; 0x194 <__divmodhi4>
  f0:	9c 83       	std	Y+4, r25	; 0x04
  f2:	8b 83       	std	Y+3, r24	; 0x03
	d[2] = (num / 10) % 10;
  f4:	cf 01       	movw	r24, r30
  f6:	b9 01       	movw	r22, r18
  f8:	4d d0       	rcall	.+154    	; 0x194 <__divmodhi4>
  fa:	fc 01       	movw	r30, r24
  fc:	cb 01       	movw	r24, r22
  fe:	b9 01       	movw	r22, r18
 100:	49 d0       	rcall	.+146    	; 0x194 <__divmodhi4>
 102:	9e 83       	std	Y+6, r25	; 0x06
 104:	8d 83       	std	Y+5, r24	; 0x05
 106:	f8 87       	std	Y+8, r31	; 0x08
	d[3] = num % 10;
 108:	ef 83       	std	Y+7, r30	; 0x07
 10a:	80 e0       	ldi	r24, 0x00	; 0

	for (int i = 0; i < 4; i++) {
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	1f c0       	rjmp	.+62     	; 0x14e <display_number+0x96>
 110:	a5 e6       	ldi	r26, 0x65	; 101
		PORTG = 0x00;
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	1c 92       	st	X, r1
 116:	fc 01       	movw	r30, r24
		PORTB = font[d[i]];
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	2c 0f       	add	r18, r28
 122:	3d 1f       	adc	r19, r29
 124:	e2 0f       	add	r30, r18
 126:	f3 1f       	adc	r31, r19
 128:	01 90       	ld	r0, Z+
 12a:	f0 81       	ld	r31, Z
 12c:	e0 2d       	mov	r30, r0
 12e:	ec 5f       	subi	r30, 0xFC	; 252
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	20 81       	ld	r18, Z
 134:	28 bb       	out	0x18, r18	; 24
 136:	fc 01       	movw	r30, r24
		PORTG = select_digit[i];
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	20 81       	ld	r18, Z
 13e:	2c 93       	st	X, r18
 140:	ef e3       	ldi	r30, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	ff e1       	ldi	r31, 0x1F	; 31
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <display_number+0x8c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <display_number+0x92>
 14a:	00 00       	nop
 14c:	01 96       	adiw	r24, 0x01	; 1
	d[0] = (num / 1000) % 10;
	d[1] = (num / 100) % 10;
	d[2] = (num / 10) % 10;
	d[3] = num % 10;

	for (int i = 0; i < 4; i++) {
 14e:	84 30       	cpi	r24, 0x04	; 4
 150:	91 05       	cpc	r25, r1
 152:	f4 f2       	brlt	.-68     	; 0x110 <display_number+0x58>
 154:	28 96       	adiw	r28, 0x08	; 8
		PORTG = 0x00;
		PORTB = font[d[i]];
		PORTG = select_digit[i];
		_delay_ms(2);
	}
}
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <main>:
 166:	8f ef       	ldi	r24, 0xFF	; 255

int main(void) {
	DDRB = 0xFF;
 168:	87 bb       	out	0x17, r24	; 23
	DDRG = 0xFF;
 16a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	while (1) {
		for (int num = 1; num <= 9999; num++) {
 16e:	01 e0       	ldi	r16, 0x01	; 1
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	0b c0       	rjmp	.+22     	; 0x18a <main+0x24>
			for (int t = 0; t < 50; t++) {
				display_number(num);
 174:	c8 01       	movw	r24, r16
 176:	a0 df       	rcall	.-192    	; 0xb8 <display_number>
	DDRB = 0xFF;
	DDRG = 0xFF;

	while (1) {
		for (int num = 1; num <= 9999; num++) {
			for (int t = 0; t < 50; t++) {
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <main+0x1a>
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	c2 33       	cpi	r28, 0x32	; 50
 182:	d1 05       	cpc	r29, r1
 184:	bc f3       	brlt	.-18     	; 0x174 <main+0xe>
int main(void) {
	DDRB = 0xFF;
	DDRG = 0xFF;

	while (1) {
		for (int num = 1; num <= 9999; num++) {
 186:	0f 5f       	subi	r16, 0xFF	; 255
 188:	1f 4f       	sbci	r17, 0xFF	; 255
 18a:	00 31       	cpi	r16, 0x10	; 16
 18c:	87 e2       	ldi	r24, 0x27	; 39
 18e:	18 07       	cpc	r17, r24
 190:	ac f3       	brlt	.-22     	; 0x17c <main+0x16>
 192:	ed cf       	rjmp	.-38     	; 0x16e <main+0x8>

00000194 <__divmodhi4>:
 194:	97 fb       	bst	r25, 7
 196:	07 2e       	mov	r0, r23
 198:	16 f4       	brtc	.+4      	; 0x19e <__divmodhi4+0xa>
 19a:	00 94       	com	r0
 19c:	06 d0       	rcall	.+12     	; 0x1aa <__divmodhi4_neg1>
 19e:	77 fd       	sbrc	r23, 7
 1a0:	08 d0       	rcall	.+16     	; 0x1b2 <__divmodhi4_neg2>
 1a2:	0b d0       	rcall	.+22     	; 0x1ba <__udivmodhi4>
 1a4:	07 fc       	sbrc	r0, 7
 1a6:	05 d0       	rcall	.+10     	; 0x1b2 <__divmodhi4_neg2>
 1a8:	3e f4       	brtc	.+14     	; 0x1b8 <__divmodhi4_exit>

000001aa <__divmodhi4_neg1>:
 1aa:	90 95       	com	r25
 1ac:	81 95       	neg	r24
 1ae:	9f 4f       	sbci	r25, 0xFF	; 255
 1b0:	08 95       	ret

000001b2 <__divmodhi4_neg2>:
 1b2:	70 95       	com	r23
 1b4:	61 95       	neg	r22
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255

000001b8 <__divmodhi4_exit>:
 1b8:	08 95       	ret

000001ba <__udivmodhi4>:
 1ba:	aa 1b       	sub	r26, r26
 1bc:	bb 1b       	sub	r27, r27
 1be:	51 e1       	ldi	r21, 0x11	; 17
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <__udivmodhi4_ep>

000001c2 <__udivmodhi4_loop>:
 1c2:	aa 1f       	adc	r26, r26
 1c4:	bb 1f       	adc	r27, r27
 1c6:	a6 17       	cp	r26, r22
 1c8:	b7 07       	cpc	r27, r23
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <__udivmodhi4_ep>
 1cc:	a6 1b       	sub	r26, r22
 1ce:	b7 0b       	sbc	r27, r23

000001d0 <__udivmodhi4_ep>:
 1d0:	88 1f       	adc	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	5a 95       	dec	r21
 1d6:	a9 f7       	brne	.-22     	; 0x1c2 <__udivmodhi4_loop>
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
