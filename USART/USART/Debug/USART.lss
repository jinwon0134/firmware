
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000014e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  000001e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000966  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089f  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f0  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000093  00000000  00000000  00001c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2e d0       	rcall	.+92     	; 0x120 <main>
  c4:	42 c0       	rjmp	.+132    	; 0x14a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:
void usart0_init();
void USART0_char(char data);
void USART0_str(char* str);
char rx_buf = 0;

ISR(USART0_RX_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	rx_buf = UDR0;
  d4:	8c b1       	in	r24, 0x0c	; 12
  d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <usart0_init>:
void usart0_init(){
	UCSR0A=0x00;
  e6:	1b b8       	out	0x0b, r1	; 11
	UCSR0B=0x98;	// 송신, 수신, 수신 인터럽트
  e8:	88 e9       	ldi	r24, 0x98	; 152
  ea:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=0x06;
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H=0x00;
  f2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=0x07;	//보오레이트 115200
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	89 b9       	out	0x09, r24	; 9
	sei(); //전체 인터럽트 활성화?
  fa:	78 94       	sei
  fc:	08 95       	ret

000000fe <USART0_char>:
}

void USART0_char(char data){
	while(!(UCSR0A&0x20))
  fe:	01 c0       	rjmp	.+2      	; 0x102 <USART0_char+0x4>
	UDR0 = data;
 100:	8c b9       	out	0x0c, r24	; 12
	UBRR0L=0x07;	//보오레이트 115200
	sei(); //전체 인터럽트 활성화?
}

void USART0_char(char data){
	while(!(UCSR0A&0x20))
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fd cf       	rjmp	.-6      	; 0x100 <USART0_char+0x2>
	UDR0 = data;
}
 106:	08 95       	ret

00000108 <USART0_str>:

void USART0_str(char* str){
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
	while(*str)
 10e:	02 c0       	rjmp	.+4      	; 0x114 <USART0_str+0xc>
		USART0_char(*str++);
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	f5 df       	rcall	.-22     	; 0xfe <USART0_char>
	while(!(UCSR0A&0x20))
	UDR0 = data;
}

void USART0_str(char* str){
	while(*str)
 114:	88 81       	ld	r24, Y
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <USART0_str+0x8>
		USART0_char(*str++);
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
	usart0_init();
 120:	e2 df       	rcall	.-60     	; 0xe6 <usart0_init>
	
    while (1) 
    {
		USART0_str("Test\n");
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	f0 df       	rcall	.-32     	; 0x108 <USART0_str>
		if(rx_buf){
 128:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 12c:	88 23       	and	r24, r24
			USART0_char(rx_buf);
 12e:	19 f0       	breq	.+6      	; 0x136 <main+0x16>
 130:	e6 df       	rcall	.-52     	; 0xfe <USART0_char>
			rx_buf = 0;
 132:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	83 ed       	ldi	r24, 0xD3	; 211
 13a:	90 e3       	ldi	r25, 0x30	; 48
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x1c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x26>
 146:	00 00       	nop
 148:	ec cf       	rjmp	.-40     	; 0x122 <main+0x2>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
