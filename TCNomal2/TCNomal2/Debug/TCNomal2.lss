
TCNomal2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000270  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2f  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a0  00000000  00000000  00000de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000390  00000000  00000000  00001687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027e  00000000  00000000  00001eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	96 d0       	rcall	.+300    	; 0x1f0 <main>
  c4:	d3 c0       	rjmp	.+422    	; 0x26c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
volatile int t_cnt = 0;
volatile int m_cnt = 0;

// -------------------- Timer0 OVF ISR --------------------
ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	// 16MHz, /1024 기준: TCNT0=0xF2 → 약 0.896 ms/OVF
	// (정확 1ms에 가깝게 하려면 0xF0 ≈ 1.024 ms)
	TCNT0 = 0xF2; // 타이머/카운터 초기값을 Re-Load
  d8:	82 ef       	ldi	r24, 0xF2	; 242
  da:	82 bf       	out	0x32, r24	; 50

	t_cnt++;
  dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <t_cnt>
  e0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <t_cnt+0x1>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <t_cnt+0x1>
  ea:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <t_cnt>
	if (t_cnt >= 1000) {   // ≈1초 주기(정확도는 클럭/리로드에 의존)
  ee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <t_cnt>
  f2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <t_cnt+0x1>
  f6:	88 3e       	cpi	r24, 0xE8	; 232
  f8:	93 40       	sbci	r25, 0x03	; 3
  fa:	c4 f0       	brlt	.+48     	; 0x12c <__vector_16+0x64>
		t_cnt = 0;
  fc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <t_cnt+0x1>
 100:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <t_cnt>
		m_cnt++;
 104:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 108:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 112:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if (m_cnt > 9999) m_cnt = 0;  // 4자리 롤오버
 116:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 11a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 11e:	80 31       	cpi	r24, 0x10	; 16
 120:	97 42       	sbci	r25, 0x27	; 39
 122:	24 f0       	brlt	.+8      	; 0x12c <__vector_16+0x64>
 124:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 128:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <Segment>:

// -------------------- 4자리 7세그 표시 함수 --------------------
void Segment (int N)
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
	int i;
	uint8_t N1000, N100, N10, N1;
	int Buff;

	if (N < 0) N = 0;
 144:	99 23       	and	r25, r25
 146:	14 f4       	brge	.+4      	; 0x14c <Segment+0x10>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
	if (N > 9999) N = 9999;
 14c:	80 31       	cpi	r24, 0x10	; 16
 14e:	27 e2       	ldi	r18, 0x27	; 39
 150:	92 07       	cpc	r25, r18
 152:	14 f0       	brlt	.+4      	; 0x158 <Segment+0x1c>
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	97 e2       	ldi	r25, 0x27	; 39

	N1000 = (uint8_t)(N / 1000);
 158:	68 ee       	ldi	r22, 0xE8	; 232
 15a:	73 e0       	ldi	r23, 0x03	; 3
 15c:	60 d0       	rcall	.+192    	; 0x21e <__divmodhi4>
 15e:	8b 01       	movw	r16, r22
	Buff  = N % 1000;
	N100  = (uint8_t)(Buff / 100);
 160:	64 e6       	ldi	r22, 0x64	; 100
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	5c d0       	rcall	.+184    	; 0x21e <__divmodhi4>
 166:	eb 01       	movw	r28, r22
	Buff  = Buff % 100;
	N10   = (uint8_t)(Buff / 10);
	N1    = (uint8_t)(Buff % 10);
 168:	6a e0       	ldi	r22, 0x0A	; 10
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	58 d0       	rcall	.+176    	; 0x21e <__divmodhi4>

	// 간단한 멀티플렉싱(가시성 위해 소량 반복)
	for (i = 0; i < 30; i++)
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	36 c0       	rjmp	.+108    	; 0x1e0 <Segment+0xa4>
	{
		// 자리 선택: PORTC 하위 4비트 사용(활성 Low 가정: 0이 켬)
		PORTC = 0x0E; // 1110b → 1번째 자리 ON
 174:	4e e0       	ldi	r20, 0x0E	; 14
 176:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N1000];
 178:	f8 01       	movw	r30, r16
 17a:	ff 27       	eor	r31, r31
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	40 81       	ld	r20, Z
 182:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	e6 e6       	ldi	r30, 0x66	; 102
 186:	fe e0       	ldi	r31, 0x0E	; 14
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <Segment+0x4c>
 18c:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x0D; // 1101b → 2번째 자리 ON
 18e:	4d e0       	ldi	r20, 0x0D	; 13
 190:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N100];
 192:	fe 01       	movw	r30, r28
 194:	ff 27       	eor	r31, r31
 196:	e0 50       	subi	r30, 0x00	; 0
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	40 81       	ld	r20, Z
 19c:	4b bb       	out	0x1b, r20	; 27
 19e:	e6 e6       	ldi	r30, 0x66	; 102
 1a0:	fe e0       	ldi	r31, 0x0E	; 14
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <Segment+0x66>
 1a6:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x0B; // 1011b → 3번째 자리 ON
 1a8:	4b e0       	ldi	r20, 0x0B	; 11
 1aa:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N10];
 1ac:	fb 01       	movw	r30, r22
 1ae:	ff 27       	eor	r31, r31
 1b0:	e0 50       	subi	r30, 0x00	; 0
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	40 81       	ld	r20, Z
 1b6:	4b bb       	out	0x1b, r20	; 27
 1b8:	e6 e6       	ldi	r30, 0x66	; 102
 1ba:	fe e0       	ldi	r31, 0x0E	; 14
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <Segment+0x80>
 1c0:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x07; // 0111b → 4번째 자리 ON
 1c2:	47 e0       	ldi	r20, 0x07	; 7
 1c4:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N1];
 1c6:	fc 01       	movw	r30, r24
 1c8:	ff 27       	eor	r31, r31
 1ca:	e0 50       	subi	r30, 0x00	; 0
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	40 81       	ld	r20, Z
 1d0:	4b bb       	out	0x1b, r20	; 27
 1d2:	e6 e6       	ldi	r30, 0x66	; 102
 1d4:	fe e0       	ldi	r31, 0x0E	; 14
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Segment+0x9a>
 1da:	00 00       	nop
	Buff  = Buff % 100;
	N10   = (uint8_t)(Buff / 10);
	N1    = (uint8_t)(Buff % 10);

	// 간단한 멀티플렉싱(가시성 위해 소량 반복)
	for (i = 0; i < 30; i++)
 1dc:	2f 5f       	subi	r18, 0xFF	; 255
 1de:	3f 4f       	sbci	r19, 0xFF	; 255
 1e0:	2e 31       	cpi	r18, 0x1E	; 30
 1e2:	31 05       	cpc	r19, r1
 1e4:	3c f2       	brlt	.-114    	; 0x174 <Segment+0x38>

		PORTC = 0x07; // 0111b → 4번째 자리 ON
		PORTA = Font[N1];
		_delay_ms(1);
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <main>:

// -------------------- 메인 --------------------
int main(void)
{
	// 포트 방향 설정
	DDRA = 0xFF;   // 세그먼트 데이터(a~g, dp)
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;   // 자리 선택(하위 4비트 출력)
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;  // 공통캐소드 기준 초기값
 1f8:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x0F;  // 모든 자리 OFF(활성 Low 가정)
 1fa:	85 bb       	out	0x15, r24	; 21

	// Timer0 설정: 내부 클럭, /1024 분주
	// ATmega128A는 TIMSK(일반 타이머) 사용
	TCCR0 = (1<<CS02) | (1<<CS01) | (1<<CS00); // 0b111 → /1024
 1fc:	87 e0       	ldi	r24, 0x07	; 7
 1fe:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0xF2;                               // 요청값(≈0.896ms/OVF)
 200:	82 ef       	ldi	r24, 0xF2	; 242
 202:	82 bf       	out	0x32, r24	; 50
	TIFR  |= (1<<TOV0);                         // 이전 OVF 플래그 클리어(1을 써서 클리어)
 204:	86 b7       	in	r24, 0x36	; 54
 206:	81 60       	ori	r24, 0x01	; 1
 208:	86 bf       	out	0x36, r24	; 54
	TIMSK |= (1<<TOIE0);                        // Timer0 Overflow 인터럽트 Enable
 20a:	87 b7       	in	r24, 0x37	; 55
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	87 bf       	out	0x37, r24	; 55

	sei(); // 전역 인터럽트 허용
 210:	78 94       	sei

	while (1)
	{
		// ISR이 m_cnt를 1초마다 증가
		Segment(m_cnt);
 212:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 216:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 21a:	90 df       	rcall	.-224    	; 0x13c <Segment>
 21c:	fa cf       	rjmp	.-12     	; 0x212 <main+0x22>

0000021e <__divmodhi4>:
 21e:	97 fb       	bst	r25, 7
 220:	07 2e       	mov	r0, r23
 222:	16 f4       	brtc	.+4      	; 0x228 <__divmodhi4+0xa>
 224:	00 94       	com	r0
 226:	06 d0       	rcall	.+12     	; 0x234 <__divmodhi4_neg1>
 228:	77 fd       	sbrc	r23, 7
 22a:	08 d0       	rcall	.+16     	; 0x23c <__divmodhi4_neg2>
 22c:	0b d0       	rcall	.+22     	; 0x244 <__udivmodhi4>
 22e:	07 fc       	sbrc	r0, 7
 230:	05 d0       	rcall	.+10     	; 0x23c <__divmodhi4_neg2>
 232:	3e f4       	brtc	.+14     	; 0x242 <__divmodhi4_exit>

00000234 <__divmodhi4_neg1>:
 234:	90 95       	com	r25
 236:	81 95       	neg	r24
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	08 95       	ret

0000023c <__divmodhi4_neg2>:
 23c:	70 95       	com	r23
 23e:	61 95       	neg	r22
 240:	7f 4f       	sbci	r23, 0xFF	; 255

00000242 <__divmodhi4_exit>:
 242:	08 95       	ret

00000244 <__udivmodhi4>:
 244:	aa 1b       	sub	r26, r26
 246:	bb 1b       	sub	r27, r27
 248:	51 e1       	ldi	r21, 0x11	; 17
 24a:	07 c0       	rjmp	.+14     	; 0x25a <__udivmodhi4_ep>

0000024c <__udivmodhi4_loop>:
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	a6 17       	cp	r26, r22
 252:	b7 07       	cpc	r27, r23
 254:	10 f0       	brcs	.+4      	; 0x25a <__udivmodhi4_ep>
 256:	a6 1b       	sub	r26, r22
 258:	b7 0b       	sbc	r27, r23

0000025a <__udivmodhi4_ep>:
 25a:	88 1f       	adc	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	5a 95       	dec	r21
 260:	a9 f7       	brne	.-22     	; 0x24c <__udivmodhi4_loop>
 262:	80 95       	com	r24
 264:	90 95       	com	r25
 266:	bc 01       	movw	r22, r24
 268:	cd 01       	movw	r24, r26
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
