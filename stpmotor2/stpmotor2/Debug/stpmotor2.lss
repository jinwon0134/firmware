
stpmotor2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000921  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083a  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	37 c0       	rjmp	.+110    	; 0x10a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	// PB3..PB0 출력
	DDRB |= 0x0F;
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	87 bb       	out	0x17, r24	; 23

	// 시퀀스 테이블
	const uint8_t seq[4] = { 0x03, 0x09, 0x0C, 0x06 };
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	89 e0       	ldi	r24, 0x09	; 9
  b6:	8a 83       	std	Y+2, r24	; 0x02
  b8:	8c e0       	ldi	r24, 0x0C	; 12
  ba:	8b 83       	std	Y+3, r24	; 0x03
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	8c 83       	std	Y+4, r24	; 0x04

	while (1) {
		for (uint8_t i = 0; i < 12; i++) {
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	17 c0       	rjmp	.+46     	; 0xf2 <main+0x54>
			for (uint8_t k = 0; k < 4; k++) {
				// 하위 4비트만 갱신(상위 비트 보존)
				PORTB = (PORTB & ~0x0F) | seq[k];
  c4:	98 b3       	in	r25, 0x18	; 24
  c6:	e1 e0       	ldi	r30, 0x01	; 1
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ec 0f       	add	r30, r28
  cc:	fd 1f       	adc	r31, r29
  ce:	e8 0f       	add	r30, r24
  d0:	f1 1d       	adc	r31, r1
  d2:	20 81       	ld	r18, Z
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	92 2b       	or	r25, r18
  d8:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef ef       	ldi	r30, 0xFF	; 255
  dc:	ff e8       	ldi	r31, 0x8F	; 143
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x40>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x46>
  e4:	00 00       	nop
	// 시퀀스 테이블
	const uint8_t seq[4] = { 0x03, 0x09, 0x0C, 0x06 };

	while (1) {
		for (uint8_t i = 0; i < 12; i++) {
			for (uint8_t k = 0; k < 4; k++) {
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	01 c0       	rjmp	.+2      	; 0xec <main+0x4e>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	50 f3       	brcs	.-44     	; 0xc4 <main+0x26>

	// 시퀀스 테이블
	const uint8_t seq[4] = { 0x03, 0x09, 0x0C, 0x06 };

	while (1) {
		for (uint8_t i = 0; i < 12; i++) {
  f0:	3f 5f       	subi	r19, 0xFF	; 255
  f2:	3c 30       	cpi	r19, 0x0C	; 12
  f4:	d0 f3       	brcs	.-12     	; 0xea <main+0x4c>
  f6:	ff ef       	ldi	r31, 0xFF	; 255
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	8c e2       	ldi	r24, 0x2C	; 44
  fc:	f1 50       	subi	r31, 0x01	; 1
  fe:	20 40       	sbci	r18, 0x00	; 0
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x5e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x68>
 106:	00 00       	nop
 108:	db cf       	rjmp	.-74     	; 0xc0 <main+0x22>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
