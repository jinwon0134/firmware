
Int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000014c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000972  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000854  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d0  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ba  00000000  00000000  00001b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	13 d0       	rcall	.+38     	; 0xea <main>
  c4:	41 c0       	rjmp	.+130    	; 0x148 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <scan_display>:

unsigned char display_digits[4] = {0,0,0,0};
volatile unsigned char number = 0;

void scan_display(void){
	PORTG = ~0x01;         // 첫 번째 자리만 켜기 (필요에 따라 반전)
  c8:	8e ef       	ldi	r24, 0xFE	; 254
  ca:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	PORTB = Fnd_code[display_digits[0]];
  ce:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <display_digits>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
  da:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9c e9       	ldi	r25, 0x9C	; 156
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <scan_display+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <scan_display+0x1e>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <main>:
	_delay_ms(10);
}


int main(void){
	DDRD = 0x00;    // 버튼 입력 PD0
  ea:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;   // 풀업저항 활성화
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	82 bb       	out	0x12, r24	; 18

	DDRB = 0xFF;    // FND 세그먼트 출력 포트 (PORTB)
  f0:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x0F;    // FND 자리 선택 출력 포트 (PORTG 0~3)
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	unsigned char last_btn_state = 1; // 버튼 안 눌림 (풀업)
  f8:	81 e0       	ldi	r24, 0x01	; 1

	while(1){
		unsigned char btn_state = (PIND>>3) & 0x01; // PD0 버튼 상태 읽기
  fa:	c0 b3       	in	r28, 0x10	; 16
  fc:	c3 fb       	bst	r28, 3
  fe:	cc 27       	eor	r28, r28
 100:	c0 f9       	bld	r28, 0

		// 버튼이 안 눌렸다가 눌렸을 때 감지
		if(last_btn_state == 1 && btn_state == 0){
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	f1 f4       	brne	.+60     	; 0x142 <main+0x58>
 106:	c1 11       	cpse	r28, r1
 108:	1c c0       	rjmp	.+56     	; 0x142 <main+0x58>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	89 ef       	ldi	r24, 0xF9	; 249
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x26>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x30>
 11a:	00 00       	nop
			_delay_ms(20); // 디바운싱
			if(((PIND >> 3) & 0x01) == 0){ // 여전히 눌림 상태면
 11c:	83 99       	sbic	0x10, 3	; 16
 11e:	11 c0       	rjmp	.+34     	; 0x142 <main+0x58>
				number++;
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
				if(number > 9) number = 0;
 12a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	10 f0       	brcs	.+4      	; 0x136 <main+0x4c>
 132:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
				display_digits[0] = number;
 136:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 13a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <display_digits>

				// 버튼이 떨어질 때까지 대기
				while(((PIND >> 3) & 0x01) == 0);
 13e:	83 9b       	sbis	0x10, 3	; 16
 140:	fe cf       	rjmp	.-4      	; 0x13e <main+0x54>
			}
		}
		last_btn_state = btn_state;

		scan_display();
 142:	c2 df       	rcall	.-124    	; 0xc8 <scan_display>

				// 버튼이 떨어질 때까지 대기
				while(((PIND >> 3) & 0x01) == 0);
			}
		}
		last_btn_state = btn_state;
 144:	8c 2f       	mov	r24, r28

		scan_display();
	}
 146:	d9 cf       	rjmp	.-78     	; 0xfa <main+0x10>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
