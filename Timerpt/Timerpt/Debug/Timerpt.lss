
Timerpt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800100  00800100  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a92  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  00000e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035c  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a4  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fa  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 32       	cpi	r26, 0x24	; 36
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4b d0       	rcall	.+150    	; 0x140 <main>
  aa:	e0 c0       	rjmp	.+448    	; 0x26c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <timer2_init>:
volatile uint8_t led_level[8] = {0};
uint8_t led_target[8] = {0};

// 소프트웨어 PWM용 Timer2 초기화
void timer2_init(void) {
	TCCR2 = (1 << WGM21) | (1 << CS22); // CTC, /64
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	85 bd       	out	0x25, r24	; 37
	OCR2  = 124;                        // 2kHz
  b2:	8c e7       	ldi	r24, 0x7C	; 124
  b4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);              // Compare Match 인터럽트
  b6:	87 b7       	in	r24, 0x37	; 55
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	87 bf       	out	0x37, r24	; 55
  bc:	08 95       	ret

000000be <__vector_9>:
}

// Timer2 ISR: 소프트웨어 PWM
ISR(TIMER2_COMP_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	0b b6       	in	r0, 0x3b	; 59
  ca:	0f 92       	push	r0
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	pwm_phase++;
  da:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pwm_phase>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <pwm_phase>
	if (pwm_phase >= PWM_STEPS) pwm_phase = 0;
  e4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <pwm_phase>
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	10 f0       	brcs	.+4      	; 0xf0 <__vector_9+0x32>
  ec:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <pwm_phase>

	uint8_t bits = 0;
	for (uint8_t i = 0; i < 8; i++) {
  f0:	80 e0       	ldi	r24, 0x00	; 0
// Timer2 ISR: 소프트웨어 PWM
ISR(TIMER2_COMP_vect) {
	pwm_phase++;
	if (pwm_phase >= PWM_STEPS) pwm_phase = 0;

	uint8_t bits = 0;
  f2:	40 e0       	ldi	r20, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
  f4:	13 c0       	rjmp	.+38     	; 0x11c <__vector_9+0x5e>
		if (led_level[i] > pwm_phase) bits |= (1u << i);
  f6:	e8 2f       	mov	r30, r24
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	e5 5e       	subi	r30, 0xE5	; 229
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	20 81       	ld	r18, Z
 100:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <pwm_phase>
 104:	92 17       	cp	r25, r18
 106:	48 f4       	brcc	.+18     	; 0x11a <__vector_9+0x5c>
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	08 2e       	mov	r0, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__vector_9+0x56>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <__vector_9+0x52>
 118:	42 2b       	or	r20, r18
ISR(TIMER2_COMP_vect) {
	pwm_phase++;
	if (pwm_phase >= PWM_STEPS) pwm_phase = 0;

	uint8_t bits = 0;
	for (uint8_t i = 0; i < 8; i++) {
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	58 f3       	brcs	.-42     	; 0xf6 <__vector_9+0x38>
		if (led_level[i] > pwm_phase) bits |= (1u << i);
	}

	#if LED_ACTIVE_LOW
	PORTB = ~bits;
 120:	40 95       	com	r20
 122:	48 bb       	out	0x18, r20	; 24
	#else
	PORTB = bits;
	#endif
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0b be       	out	0x3b, r0	; 59
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <main>:
	}
}

int main(void) {
	// LED 출력 설정
	DDRB = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	87 bb       	out	0x17, r24	; 23
	#if LED_ACTIVE_LOW
	PORTB = 0xFF;
 144:	88 bb       	out	0x18, r24	; 24
	#else
	PORTB = 0x00;
	#endif

	// 버튼 입력 설정 (PD0~PD7) + 내부 풀업
	DDRD  = 0x00;
 146:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;
 148:	82 bb       	out	0x12, r24	; 18

	timer2_init();
 14a:	b1 df       	rcall	.-158    	; 0xae <timer2_init>
	sei();
 14c:	78 94       	sei
		if (led_level[i] < led_target[i]) led_level[i]++;
		else if (led_level[i] > led_target[i]) led_level[i]--;
	}
}

int main(void) {
 14e:	a0 e0       	ldi	r26, 0x00	; 0
 150:	b0 e0       	ldi	r27, 0x00	; 0
static inline void update_targets_from_buttons(void) {
	static uint8_t last_state = 0;
	static uint16_t last_time[8] = {0};
	static uint16_t ms_counter = 0;

	ms_counter += 2; // 루프에서 2ms씩 증가
 152:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <ms_counter.1749>
 156:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <ms_counter.1749+0x1>
 15a:	6e 5f       	subi	r22, 0xFE	; 254
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
 15e:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <ms_counter.1749+0x1>
 162:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <ms_counter.1749>

	uint8_t current_state = ~PIND;       // 현재 버튼 상태 (풀업)
 166:	c0 b3       	in	r28, 0x10	; 16
 168:	c0 95       	com	r28
	uint8_t new_press = current_state & ~last_state; // 새로 눌린 버튼 감지
 16a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <last_state.1747>
 16e:	90 95       	com	r25
 170:	9c 23       	and	r25, r28

	for (uint8_t i = 0; i < 8; i++) {
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	45 c0       	rjmp	.+138    	; 0x200 <main+0xc0>
		if (new_press & (1 << i)) {
 176:	48 2f       	mov	r20, r24
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	29 2f       	mov	r18, r25
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	08 2e       	mov	r0, r24
 180:	02 c0       	rjmp	.+4      	; 0x186 <main+0x46>
 182:	35 95       	asr	r19
 184:	27 95       	ror	r18
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <main+0x42>
 18a:	20 ff       	sbrs	r18, 0
 18c:	38 c0       	rjmp	.+112    	; 0x1fe <main+0xbe>
			if ((ms_counter - last_time[i]) > DEBOUNCE_MS) {
 18e:	fa 01       	movw	r30, r20
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e0 50       	subi	r30, 0x00	; 0
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	20 81       	ld	r18, Z
 19a:	31 81       	ldd	r19, Z+1	; 0x01
 19c:	fb 01       	movw	r30, r22
 19e:	e2 1b       	sub	r30, r18
 1a0:	f3 0b       	sbc	r31, r19
 1a2:	f3 97       	sbiw	r30, 0x33	; 51
 1a4:	60 f1       	brcs	.+88     	; 0x1fe <main+0xbe>
				uint8_t level = ((i + 1) * PWM_STEPS) / 8;
 1a6:	fa 01       	movw	r30, r20
 1a8:	31 96       	adiw	r30, 0x01	; 1
 1aa:	9f 01       	movw	r18, r30
 1ac:	22 95       	swap	r18
 1ae:	32 95       	swap	r19
 1b0:	30 7f       	andi	r19, 0xF0	; 240
 1b2:	32 27       	eor	r19, r18
 1b4:	20 7f       	andi	r18, 0xF0	; 240
 1b6:	32 27       	eor	r19, r18
 1b8:	f3 ff       	sbrs	r31, 3
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <main+0x80>
 1bc:	29 5f       	subi	r18, 0xF9	; 249
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	35 95       	asr	r19
 1c2:	27 95       	ror	r18
 1c4:	35 95       	asr	r19
 1c6:	27 95       	ror	r18
 1c8:	35 95       	asr	r19
 1ca:	27 95       	ror	r18
				if (level < 1) level = 1;
 1cc:	21 11       	cpse	r18, r1
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <main+0x92>
 1d0:	21 e0       	ldi	r18, 0x01	; 1
				led_target[i] = level;
 1d2:	fa 01       	movw	r30, r20
 1d4:	ed 5e       	subi	r30, 0xED	; 237
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	20 83       	st	Z, r18
				if (led_level[i] == 0) led_level[i] = 1;
 1da:	fa 01       	movw	r30, r20
 1dc:	e5 5e       	subi	r30, 0xE5	; 229
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	20 81       	ld	r18, Z
 1e2:	21 11       	cpse	r18, r1
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <main+0xb0>
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	fa 01       	movw	r30, r20
 1ea:	e5 5e       	subi	r30, 0xE5	; 229
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	20 83       	st	Z, r18
				last_time[i] = ms_counter;
 1f0:	44 0f       	add	r20, r20
 1f2:	55 1f       	adc	r21, r21
 1f4:	fa 01       	movw	r30, r20
 1f6:	e0 50       	subi	r30, 0x00	; 0
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	71 83       	std	Z+1, r23	; 0x01
 1fc:	60 83       	st	Z, r22
	ms_counter += 2; // 루프에서 2ms씩 증가

	uint8_t current_state = ~PIND;       // 현재 버튼 상태 (풀업)
	uint8_t new_press = current_state & ~last_state; // 새로 눌린 버튼 감지

	for (uint8_t i = 0; i < 8; i++) {
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	88 30       	cpi	r24, 0x08	; 8
 202:	08 f4       	brcc	.+2      	; 0x206 <main+0xc6>
 204:	b8 cf       	rjmp	.-144    	; 0x176 <main+0x36>
				last_time[i] = ms_counter;
			}
		}
	}

	last_state = current_state;
 206:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <last_state.1747>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8f e3       	ldi	r24, 0x3F	; 63
 20c:	9f e1       	ldi	r25, 0x1F	; 31
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0xce>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0xd4>
 214:	00 00       	nop

	while (1) {
		update_targets_from_buttons();

		_delay_ms(2);
		ramp_timer += 2;
 216:	12 96       	adiw	r26, 0x02	; 2
		if (ramp_timer >= RAMP_STEP_MS) {
 218:	a4 31       	cpi	r26, 0x14	; 20
 21a:	b1 05       	cpc	r27, r1
 21c:	08 f4       	brcc	.+2      	; 0x220 <main+0xe0>
 21e:	99 cf       	rjmp	.-206    	; 0x152 <main+0x12>
 220:	21 c0       	rjmp	.+66     	; 0x264 <main+0x124>
}

// LED 밝기를 목표로 한 단계씩 변화
static inline void ramp_one_step(void) {
	for (uint8_t i = 0; i < 8; i++) {
		if (led_level[i] < led_target[i]) led_level[i]++;
 222:	82 2f       	mov	r24, r18
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	e5 5e       	subi	r30, 0xE5	; 229
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	40 81       	ld	r20, Z
 22e:	fc 01       	movw	r30, r24
 230:	ed 5e       	subi	r30, 0xED	; 237
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	30 81       	ld	r19, Z
 236:	43 17       	cp	r20, r19
 238:	38 f4       	brcc	.+14     	; 0x248 <main+0x108>
 23a:	fc 01       	movw	r30, r24
 23c:	e5 5e       	subi	r30, 0xE5	; 229
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	80 81       	ld	r24, Z
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 83       	st	Z, r24
 246:	0c c0       	rjmp	.+24     	; 0x260 <main+0x120>
		else if (led_level[i] > led_target[i]) led_level[i]--;
 248:	fc 01       	movw	r30, r24
 24a:	e5 5e       	subi	r30, 0xE5	; 229
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	40 81       	ld	r20, Z
 250:	34 17       	cp	r19, r20
 252:	30 f4       	brcc	.+12     	; 0x260 <main+0x120>
 254:	fc 01       	movw	r30, r24
 256:	e5 5e       	subi	r30, 0xE5	; 229
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	80 81       	ld	r24, Z
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	80 83       	st	Z, r24
	last_state = current_state;
}

// LED 밝기를 목표로 한 단계씩 변화
static inline void ramp_one_step(void) {
	for (uint8_t i = 0; i < 8; i++) {
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	01 c0       	rjmp	.+2      	; 0x266 <main+0x126>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	28 30       	cpi	r18, 0x08	; 8
 268:	e0 f2       	brcs	.-72     	; 0x222 <main+0xe2>
 26a:	71 cf       	rjmp	.-286    	; 0x14e <main+0xe>

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
