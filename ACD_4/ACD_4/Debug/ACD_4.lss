
ACD_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1f  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088a  00000000  00000000  00000d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000337  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  00001dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000209f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	89 c0       	rjmp	.+274    	; 0x168 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	69 d0       	rcall	.+210    	; 0x196 <main>
  c4:	a5 c0       	rjmp	.+330    	; 0x210 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:
};

volatile unsigned int adc_data = 0;

void Segment(int N)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	int i;
	unsigned char N1000, N100, N10, N1;
	int Buff;

	N1000 = N/1000;
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	76 d0       	rcall	.+236    	; 0x1c2 <__divmodhi4>
  d6:	8b 01       	movw	r16, r22
	Buff = N%1000;
	N100 = Buff/100;
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	72 d0       	rcall	.+228    	; 0x1c2 <__divmodhi4>
  de:	eb 01       	movw	r28, r22
	Buff = Buff%100;
	N10 = Buff/10;
	N1 = Buff%10;
  e0:	6a e0       	ldi	r22, 0x0A	; 10
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	6e d0       	rcall	.+220    	; 0x1c2 <__divmodhi4>

	for(i=0;i<30;i++){
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	36 c0       	rjmp	.+108    	; 0x158 <Segment+0x90>
		PORTC=0x0e; PORTA=Font[N1000]; _delay_ms(1);
  ec:	4e e0       	ldi	r20, 0x0E	; 14
  ee:	45 bb       	out	0x15, r20	; 21
  f0:	f8 01       	movw	r30, r16
  f2:	ff 27       	eor	r31, r31
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	40 81       	ld	r20, Z
  fa:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	e6 e6       	ldi	r30, 0x66	; 102
  fe:	fe e0       	ldi	r31, 0x0E	; 14
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Segment+0x38>
 104:	00 00       	nop
		PORTC=0x0d; PORTA=Font[N100];  _delay_ms(1);
 106:	4d e0       	ldi	r20, 0x0D	; 13
 108:	45 bb       	out	0x15, r20	; 21
 10a:	fe 01       	movw	r30, r28
 10c:	ff 27       	eor	r31, r31
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	40 81       	ld	r20, Z
 114:	4b bb       	out	0x1b, r20	; 27
 116:	e6 e6       	ldi	r30, 0x66	; 102
 118:	fe e0       	ldi	r31, 0x0E	; 14
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <Segment+0x52>
 11e:	00 00       	nop
		PORTC=0x0b; PORTA=Font[N10];   _delay_ms(1);
 120:	4b e0       	ldi	r20, 0x0B	; 11
 122:	45 bb       	out	0x15, r20	; 21
 124:	fb 01       	movw	r30, r22
 126:	ff 27       	eor	r31, r31
 128:	e0 50       	subi	r30, 0x00	; 0
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	40 81       	ld	r20, Z
 12e:	4b bb       	out	0x1b, r20	; 27
 130:	e6 e6       	ldi	r30, 0x66	; 102
 132:	fe e0       	ldi	r31, 0x0E	; 14
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <Segment+0x6c>
 138:	00 00       	nop
		PORTC=0x07; PORTA=Font[N1];    _delay_ms(1);
 13a:	47 e0       	ldi	r20, 0x07	; 7
 13c:	45 bb       	out	0x15, r20	; 21
 13e:	fc 01       	movw	r30, r24
 140:	ff 27       	eor	r31, r31
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	40 81       	ld	r20, Z
 148:	4b bb       	out	0x1b, r20	; 27
 14a:	e6 e6       	ldi	r30, 0x66	; 102
 14c:	fe e0       	ldi	r31, 0x0E	; 14
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <Segment+0x86>
 152:	00 00       	nop
	N100 = Buff/100;
	Buff = Buff%100;
	N10 = Buff/10;
	N1 = Buff%10;

	for(i=0;i<30;i++){
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	2e 31       	cpi	r18, 0x1E	; 30
 15a:	31 05       	cpc	r19, r1
 15c:	3c f2       	brlt	.-114    	; 0xec <Segment+0x24>
		PORTC=0x0e; PORTA=Font[N1000]; _delay_ms(1);
		PORTC=0x0d; PORTA=Font[N100];  _delay_ms(1);
		PORTC=0x0b; PORTA=Font[N10];   _delay_ms(1);
		PORTC=0x07; PORTA=Font[N1];    _delay_ms(1);
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <__vector_21>:

ISR(ADC_vect) {
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
	adc_data = ADCW;
 176:	84 b1       	in	r24, 0x04	; 4
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 17e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	ADCSRA |= (1<<ADSC);   // 다음 변환 계속
 182:	86 b1       	in	r24, 0x06	; 6
 184:	80 64       	ori	r24, 0x40	; 64
 186:	86 b9       	out	0x06, r24	; 6
}
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <main>:

int main(void)
{
	DDRA=0xFF;
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	9a bb       	out	0x1a, r25	; 26
	DDRC=0x0F;
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	84 bb       	out	0x14, r24	; 20
	PORTA=0xFF;
 19e:	9b bb       	out	0x1b, r25	; 27
	PORTC=0x0F;
 1a0:	85 bb       	out	0x15, r24	; 21

	DDRF=0x00;             // PF3 입력
 1a2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	ADMUX = 0x03;          // ADC3 선택 (PF3)
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // ADC enable, interrupt enable, 128분주
 1aa:	8f e8       	ldi	r24, 0x8F	; 143
 1ac:	86 b9       	out	0x06, r24	; 6

	sei();                 // 전역 인터럽트 허용
 1ae:	78 94       	sei
	ADCSRA |= (1<<ADSC);   // 첫 변환 시작
 1b0:	86 b1       	in	r24, 0x06	; 6
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	86 b9       	out	0x06, r24	; 6

	while(1) {
		Segment(adc_data);
 1b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1ba:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1be:	84 df       	rcall	.-248    	; 0xc8 <Segment>
 1c0:	fa cf       	rjmp	.-12     	; 0x1b6 <main+0x20>

000001c2 <__divmodhi4>:
 1c2:	97 fb       	bst	r25, 7
 1c4:	07 2e       	mov	r0, r23
 1c6:	16 f4       	brtc	.+4      	; 0x1cc <__divmodhi4+0xa>
 1c8:	00 94       	com	r0
 1ca:	06 d0       	rcall	.+12     	; 0x1d8 <__divmodhi4_neg1>
 1cc:	77 fd       	sbrc	r23, 7
 1ce:	08 d0       	rcall	.+16     	; 0x1e0 <__divmodhi4_neg2>
 1d0:	0b d0       	rcall	.+22     	; 0x1e8 <__udivmodhi4>
 1d2:	07 fc       	sbrc	r0, 7
 1d4:	05 d0       	rcall	.+10     	; 0x1e0 <__divmodhi4_neg2>
 1d6:	3e f4       	brtc	.+14     	; 0x1e6 <__divmodhi4_exit>

000001d8 <__divmodhi4_neg1>:
 1d8:	90 95       	com	r25
 1da:	81 95       	neg	r24
 1dc:	9f 4f       	sbci	r25, 0xFF	; 255
 1de:	08 95       	ret

000001e0 <__divmodhi4_neg2>:
 1e0:	70 95       	com	r23
 1e2:	61 95       	neg	r22
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255

000001e6 <__divmodhi4_exit>:
 1e6:	08 95       	ret

000001e8 <__udivmodhi4>:
 1e8:	aa 1b       	sub	r26, r26
 1ea:	bb 1b       	sub	r27, r27
 1ec:	51 e1       	ldi	r21, 0x11	; 17
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <__udivmodhi4_ep>

000001f0 <__udivmodhi4_loop>:
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	a6 17       	cp	r26, r22
 1f6:	b7 07       	cpc	r27, r23
 1f8:	10 f0       	brcs	.+4      	; 0x1fe <__udivmodhi4_ep>
 1fa:	a6 1b       	sub	r26, r22
 1fc:	b7 0b       	sbc	r27, r23

000001fe <__udivmodhi4_ep>:
 1fe:	88 1f       	adc	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	5a 95       	dec	r21
 204:	a9 f7       	brne	.-22     	; 0x1f0 <__udivmodhi4_loop>
 206:	80 95       	com	r24
 208:	90 95       	com	r25
 20a:	bc 01       	movw	r22, r24
 20c:	cd 01       	movw	r24, r26
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
