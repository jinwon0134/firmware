
CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800112  00800112  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000adf  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00000ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036f  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026f  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000021bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	76 c0       	rjmp	.+236    	; 0x12a <__vector_15>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	64 d0       	rcall	.+200    	; 0x18c <main>
  c4:	f2 c0       	rjmp	.+484    	; 0x2aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:

volatile int tr_cnt = 0, mr_cnt = 0;
volatile int tl_cnt = 0, ml_cnt = 0;

ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	tr_cnt++;
  d6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tr_cnt>
  da:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <tr_cnt+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <tr_cnt+0x1>
  e4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <tr_cnt>
	if (tr_cnt >= 56) {
  e8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tr_cnt>
  ec:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <tr_cnt+0x1>
  f0:	c8 97       	sbiw	r24, 0x38	; 56
  f2:	a4 f0       	brlt	.+40     	; 0x11c <__vector_16+0x54>
		tr_cnt = 0;
  f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <tr_cnt+0x1>
  f8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <tr_cnt>
		if (++mr_cnt > 99) mr_cnt = 0;
  fc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mr_cnt>
 100:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <mr_cnt+0x1>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <mr_cnt+0x1>
 10a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mr_cnt>
 10e:	84 36       	cpi	r24, 0x64	; 100
 110:	91 05       	cpc	r25, r1
 112:	24 f0       	brlt	.+8      	; 0x11c <__vector_16+0x54>
 114:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <mr_cnt+0x1>
 118:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <mr_cnt>
	}
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <__vector_15>:

ISR(TIMER0_COMP_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
	tl_cnt++;
 138:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tl_cnt>
 13c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <tl_cnt+0x1>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <tl_cnt+0x1>
 146:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tl_cnt>
	if (tl_cnt >= 28) {
 14a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tl_cnt>
 14e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <tl_cnt+0x1>
 152:	4c 97       	sbiw	r24, 0x1c	; 28
 154:	a4 f0       	brlt	.+40     	; 0x17e <__vector_15+0x54>
		tl_cnt = 0;
 156:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <tl_cnt+0x1>
 15a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <tl_cnt>
		if (++ml_cnt > 99) ml_cnt = 0;
 15e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 162:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 16c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 170:	84 36       	cpi	r24, 0x64	; 100
 172:	91 05       	cpc	r25, r1
 174:	24 f0       	brlt	.+8      	; 0x17e <__vector_15+0x54>
 176:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 17a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}
}
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <main>:

int main(void)
{
	DDRA = 0xFF;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
 194:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x0F;
 196:	85 bb       	out	0x15, r24	; 21

	DDRB |= (1<<PB4);
 198:	87 b3       	in	r24, 0x17	; 23
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	87 bb       	out	0x17, r24	; 23

	TCCR0 = (1<<WGM01)|(1<<WGM00) | (1<<COM01) | (1<<CS02)|(1<<CS01)|(1<<CS00);
 19e:	8f e6       	ldi	r24, 0x6F	; 111
 1a0:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 1a2:	12 be       	out	0x32, r1	; 50
	OCR0  = 102;
 1a4:	86 e6       	ldi	r24, 0x66	; 102
 1a6:	81 bf       	out	0x31, r24	; 49

	TIFR  |= (1<<TOV0) | (1<<OCF0);
 1a8:	86 b7       	in	r24, 0x36	; 54
 1aa:	83 60       	ori	r24, 0x03	; 3
 1ac:	86 bf       	out	0x36, r24	; 54
	TIMSK |= (1<<TOIE0) | (1<<OCIE0);
 1ae:	87 b7       	in	r24, 0x37	; 55
 1b0:	83 60       	ori	r24, 0x03	; 3
 1b2:	87 bf       	out	0x37, r24	; 55

	sei();
 1b4:	78 94       	sei

	while (1) {
		LSegment(ml_cnt);
 1b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1ba:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
}

static inline void LSegment(int N)
{
	uint8_t N10 = N / 10;
	uint8_t N1  = N % 10;
 1be:	6a e0       	ldi	r22, 0x0A	; 10
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	4c d0       	rcall	.+152    	; 0x25c <__divmodhi4>
 1c4:	ac 01       	movw	r20, r24
	for (uint8_t i = 0; i < 5; i++) {
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	1d c0       	rjmp	.+58     	; 0x204 <main+0x78>
		PORTC = 0x0E; PORTA = Font[N10]; _delay_ms(1);
 1ca:	2e e0       	ldi	r18, 0x0E	; 14
 1cc:	25 bb       	out	0x15, r18	; 21
 1ce:	fb 01       	movw	r30, r22
 1d0:	ff 27       	eor	r31, r31
 1d2:	e0 50       	subi	r30, 0x00	; 0
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	20 81       	ld	r18, Z
 1d8:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	ef e9       	ldi	r30, 0x9F	; 159
 1dc:	ff e0       	ldi	r31, 0x0F	; 15
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x52>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x58>
 1e4:	00 00       	nop
		PORTC = 0x0D; PORTA = Font[N1];  _delay_ms(1);
 1e6:	2d e0       	ldi	r18, 0x0D	; 13
 1e8:	25 bb       	out	0x15, r18	; 21
 1ea:	fa 01       	movw	r30, r20
 1ec:	ff 27       	eor	r31, r31
 1ee:	e0 50       	subi	r30, 0x00	; 0
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	20 81       	ld	r18, Z
 1f4:	2b bb       	out	0x1b, r18	; 27
 1f6:	ef e9       	ldi	r30, 0x9F	; 159
 1f8:	ff e0       	ldi	r31, 0x0F	; 15
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x6e>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x74>
 200:	00 00       	nop

static inline void LSegment(int N)
{
	uint8_t N10 = N / 10;
	uint8_t N1  = N % 10;
	for (uint8_t i = 0; i < 5; i++) {
 202:	9f 5f       	subi	r25, 0xFF	; 255
 204:	95 30       	cpi	r25, 0x05	; 5
 206:	08 f3       	brcs	.-62     	; 0x1ca <main+0x3e>

	sei();

	while (1) {
		LSegment(ml_cnt);
		RSegment(mr_cnt);
 208:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mr_cnt>
 20c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <mr_cnt+0x1>
};

static inline void RSegment(int N)
{
	uint8_t N10 = N / 10;
	uint8_t N1  = N % 10;
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	23 d0       	rcall	.+70     	; 0x25c <__divmodhi4>
 216:	ac 01       	movw	r20, r24
	for (uint8_t i = 0; i < 5; i++) {
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	1d c0       	rjmp	.+58     	; 0x256 <main+0xca>
		PORTC = 0x0B; PORTA = Font[N10]; _delay_ms(1);
 21c:	2b e0       	ldi	r18, 0x0B	; 11
 21e:	25 bb       	out	0x15, r18	; 21
 220:	fb 01       	movw	r30, r22
 222:	ff 27       	eor	r31, r31
 224:	e0 50       	subi	r30, 0x00	; 0
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	20 81       	ld	r18, Z
 22a:	2b bb       	out	0x1b, r18	; 27
 22c:	ef e9       	ldi	r30, 0x9F	; 159
 22e:	ff e0       	ldi	r31, 0x0F	; 15
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0xa4>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xaa>
 236:	00 00       	nop
		PORTC = 0x07; PORTA = Font[N1];  _delay_ms(1);
 238:	27 e0       	ldi	r18, 0x07	; 7
 23a:	25 bb       	out	0x15, r18	; 21
 23c:	fa 01       	movw	r30, r20
 23e:	ff 27       	eor	r31, r31
 240:	e0 50       	subi	r30, 0x00	; 0
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	20 81       	ld	r18, Z
 246:	2b bb       	out	0x1b, r18	; 27
 248:	ef e9       	ldi	r30, 0x9F	; 159
 24a:	ff e0       	ldi	r31, 0x0F	; 15
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0xc0>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xc6>
 252:	00 00       	nop

static inline void RSegment(int N)
{
	uint8_t N10 = N / 10;
	uint8_t N1  = N % 10;
	for (uint8_t i = 0; i < 5; i++) {
 254:	9f 5f       	subi	r25, 0xFF	; 255
 256:	95 30       	cpi	r25, 0x05	; 5
 258:	08 f3       	brcs	.-62     	; 0x21c <main+0x90>
 25a:	ad cf       	rjmp	.-166    	; 0x1b6 <main+0x2a>

0000025c <__divmodhi4>:
 25c:	97 fb       	bst	r25, 7
 25e:	07 2e       	mov	r0, r23
 260:	16 f4       	brtc	.+4      	; 0x266 <__divmodhi4+0xa>
 262:	00 94       	com	r0
 264:	06 d0       	rcall	.+12     	; 0x272 <__divmodhi4_neg1>
 266:	77 fd       	sbrc	r23, 7
 268:	08 d0       	rcall	.+16     	; 0x27a <__divmodhi4_neg2>
 26a:	0b d0       	rcall	.+22     	; 0x282 <__udivmodhi4>
 26c:	07 fc       	sbrc	r0, 7
 26e:	05 d0       	rcall	.+10     	; 0x27a <__divmodhi4_neg2>
 270:	3e f4       	brtc	.+14     	; 0x280 <__divmodhi4_exit>

00000272 <__divmodhi4_neg1>:
 272:	90 95       	com	r25
 274:	81 95       	neg	r24
 276:	9f 4f       	sbci	r25, 0xFF	; 255
 278:	08 95       	ret

0000027a <__divmodhi4_neg2>:
 27a:	70 95       	com	r23
 27c:	61 95       	neg	r22
 27e:	7f 4f       	sbci	r23, 0xFF	; 255

00000280 <__divmodhi4_exit>:
 280:	08 95       	ret

00000282 <__udivmodhi4>:
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	51 e1       	ldi	r21, 0x11	; 17
 288:	07 c0       	rjmp	.+14     	; 0x298 <__udivmodhi4_ep>

0000028a <__udivmodhi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	a6 17       	cp	r26, r22
 290:	b7 07       	cpc	r27, r23
 292:	10 f0       	brcs	.+4      	; 0x298 <__udivmodhi4_ep>
 294:	a6 1b       	sub	r26, r22
 296:	b7 0b       	sbc	r27, r23

00000298 <__udivmodhi4_ep>:
 298:	88 1f       	adc	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	5a 95       	dec	r21
 29e:	a9 f7       	brne	.-22     	; 0x28a <__udivmodhi4_loop>
 2a0:	80 95       	com	r24
 2a2:	90 95       	com	r25
 2a4:	bc 01       	movw	r22, r24
 2a6:	cd 01       	movw	r24, r26
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
