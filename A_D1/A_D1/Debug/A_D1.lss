
A_D1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001ec  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e6a  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099b  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ad  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000416  00000000  00000000  00002521  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002937  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	82 d0       	rcall	.+260    	; 0x1b8 <main>
  b4:	99 c0       	rjmp	.+306    	; 0x1e8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <PortInit>:
#define LCD_EN    0
#define LCD_RW    1
#define LCD_RS    2

void PortInit(void){
	DDRB = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x0F;
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  c2:	08 95       	ret

000000c4 <LCD_Data>:
}

void LCD_Data(Byte ch){
	LCD_CTRL |=(1<<LCD_RS);
  c4:	e5 e6       	ldi	r30, 0x65	; 101
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	94 60       	ori	r25, 0x04	; 4
  cc:	90 83       	st	Z, r25
	LCD_CTRL &= ~(1<<LCD_RW);
  ce:	90 81       	ld	r25, Z
  d0:	9d 7f       	andi	r25, 0xFD	; 253
  d2:	90 83       	st	Z, r25
	LCD_CTRL |= (1<<LCD_EN);
  d4:	90 81       	ld	r25, Z
  d6:	91 60       	ori	r25, 0x01	; 1
  d8:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	96 ef       	ldi	r25, 0xF6	; 246
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_Data+0x18>
	_delay_us(50);
	LCD_WDATA = ch;
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	86 ef       	ldi	r24, 0xF6	; 246
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Data+0x20>
	_delay_us(50);
	LCD_CTRL&= ~(1<<LCD_EN);
  e8:	80 81       	ld	r24, Z
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <LCD_Comm>:
}

void LCD_Comm(Byte ch){
	LCD_CTRL &= ~(1<<LCD_RS);
  f0:	e5 e6       	ldi	r30, 0x65	; 101
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	9b 7f       	andi	r25, 0xFB	; 251
  f8:	90 83       	st	Z, r25
	LCD_CTRL &= ~(1<<LCD_RW);
  fa:	90 81       	ld	r25, Z
  fc:	9d 7f       	andi	r25, 0xFD	; 253
  fe:	90 83       	st	Z, r25
	LCD_CTRL |= (1<< LCD_EN);
 100:	90 81       	ld	r25, Z
 102:	91 60       	ori	r25, 0x01	; 1
 104:	90 83       	st	Z, r25
 106:	96 ef       	ldi	r25, 0xF6	; 246
 108:	9a 95       	dec	r25
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Comm+0x18>
	_delay_us(50);
	LCD_WINST = ch;
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	86 ef       	ldi	r24, 0xF6	; 246
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_Comm+0x20>
	_delay_us(50);
	LCD_CTRL &= ~(1<<LCD_EN);
 114:	80 81       	ld	r24, Z
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <LCD_CHAR>:
}

void LCD_CHAR(Byte c){
	LCD_Data(c);
 11c:	d3 df       	rcall	.-90     	; 0xc4 <LCD_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	86 e6       	ldi	r24, 0x66	; 102
 120:	9e e0       	ldi	r25, 0x0E	; 14
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_CHAR+0x6>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <LCD_STR>:
	_delay_ms(1);
}

void LCD_STR(Byte *str){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
	while(*str !=0){
 130:	02 c0       	rjmp	.+4      	; 0x136 <LCD_STR+0xc>
		LCD_CHAR(*str);
 132:	f4 df       	rcall	.-24     	; 0x11c <LCD_CHAR>
		str++;
 134:	21 96       	adiw	r28, 0x01	; 1
	LCD_Data(c);
	_delay_ms(1);
}

void LCD_STR(Byte *str){
	while(*str !=0){
 136:	88 81       	ld	r24, Y
 138:	81 11       	cpse	r24, r1
 13a:	fb cf       	rjmp	.-10     	; 0x132 <LCD_STR+0x8>
		LCD_CHAR(*str);
		str++;
	}
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <LCD_pos>:

void LCD_pos(unsigned char col, unsigned char row){
	LCD_Comm(0x80 | (row+col*0x40));
 142:	90 e4       	ldi	r25, 0x40	; 64
 144:	89 9f       	mul	r24, r25
 146:	60 0d       	add	r22, r0
 148:	11 24       	eor	r1, r1
 14a:	86 2f       	mov	r24, r22
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	d0 cf       	rjmp	.-96     	; 0xf0 <LCD_Comm>
 150:	08 95       	ret

00000152 <LCD_Clear>:
}

void LCD_Clear(void){
	LCD_Comm(0x01);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	cd df       	rcall	.-102    	; 0xf0 <LCD_Comm>
 156:	8c ec       	ldi	r24, 0xCC	; 204
 158:	9c e1       	ldi	r25, 0x1C	; 28
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Clear+0x8>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Clear+0xe>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init(void){
	LCD_Comm(0x38);
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	c4 df       	rcall	.-120    	; 0xf0 <LCD_Comm>
 168:	8c ec       	ldi	r24, 0xCC	; 204
 16a:	9c e1       	ldi	r25, 0x1C	; 28
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x8>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0xe>
 172:	00 00       	nop
	_delay_ms(2);
	LCD_Comm(0x38);
 174:	88 e3       	ldi	r24, 0x38	; 56
 176:	bc df       	rcall	.-136    	; 0xf0 <LCD_Comm>
 178:	8c ec       	ldi	r24, 0xCC	; 204
 17a:	9c e1       	ldi	r25, 0x1C	; 28
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_Init+0x18>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_Init+0x1e>
	_delay_ms(2);
	LCD_Comm(0x38);
 182:	00 00       	nop
 184:	88 e3       	ldi	r24, 0x38	; 56
 186:	b4 df       	rcall	.-152    	; 0xf0 <LCD_Comm>
 188:	8c ec       	ldi	r24, 0xCC	; 204
 18a:	9c e1       	ldi	r25, 0x1C	; 28
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Init+0x28>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Init+0x2e>
	_delay_ms(2);
	LCD_Comm(0x0e);
 192:	00 00       	nop
 194:	8e e0       	ldi	r24, 0x0E	; 14
 196:	ac df       	rcall	.-168    	; 0xf0 <LCD_Comm>
 198:	8c ec       	ldi	r24, 0xCC	; 204
 19a:	9c e1       	ldi	r25, 0x1C	; 28
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Init+0x38>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Init+0x3e>
	_delay_ms(2);
	LCD_Comm(0x06);
 1a2:	00 00       	nop
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	a4 df       	rcall	.-184    	; 0xf0 <LCD_Comm>
 1a8:	8c ec       	ldi	r24, 0xCC	; 204
 1aa:	9c e1       	ldi	r25, 0x1C	; 28
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Init+0x48>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_Init+0x4e>
	_delay_ms(2);
	LCD_Clear();
 1b2:	00 00       	nop
 1b4:	ce cf       	rjmp	.-100    	; 0x152 <LCD_Clear>
 1b6:	08 95       	ret

000001b8 <main>:
#include <util/delay.h>
#include "lcd.h"
// #include <stdio.h>  // snprintf 쓸 때만

int main(void){
	PortInit();
 1b8:	7f df       	rcall	.-258    	; 0xb8 <PortInit>
	LCD_Init();
 1ba:	d4 df       	rcall	.-88     	; 0x164 <LCD_Init>
 1bc:	60 e0       	ldi	r22, 0x00	; 0

	LCD_pos(0,0);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	c0 df       	rcall	.-128    	; 0x142 <LCD_pos>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
	LCD_STR((Byte*)"ATmega 128");
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	b1 df       	rcall	.-158    	; 0x12a <LCD_STR>
 1c8:	61 e0       	ldi	r22, 0x01	; 1
	LCD_pos(0,1);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	ba df       	rcall	.-140    	; 0x142 <LCD_pos>
 1ce:	8b e0       	ldi	r24, 0x0B	; 11
	LCD_STR((Byte*)"Hello LCD");
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	ab df       	rcall	.-170    	; 0x12a <LCD_STR>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	8f e7       	ldi	r24, 0x7F	; 127
 1d8:	96 e1       	ldi	r25, 0x16	; 22
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x22>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x2c>
 1e4:	00 00       	nop
 1e6:	f6 cf       	rjmp	.-20     	; 0x1d4 <main+0x1c>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
