
USART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d7  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000833  00000000  00000000  00000b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000075  00000000  00000000  00001ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	15 d0       	rcall	.+42     	; 0xc4 <main>
  9a:	47 c0       	rjmp	.+142    	; 0x12a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Init_USART>:
void USART_str(unsigned char* str)
{
	while(*str){
		USART0_tx(*str++);
	}
}
  9e:	1b b8       	out	0x0b, r1	; 11
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  aa:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	89 b9       	out	0x09, r24	; 9
  b2:	08 95       	ret

000000b4 <USART0_tx>:
  b4:	5d 9b       	sbis	0x0b, 5	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <USART0_tx>
  b8:	8c b9       	out	0x0c, r24	; 12
  ba:	08 95       	ret

000000bc <USART0_rx>:
  bc:	5f 9b       	sbis	0x0b, 7	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <USART0_rx>
  c0:	8c b1       	in	r24, 0x0c	; 12
  c2:	08 95       	ret

000000c4 <main>:
// // 		_delay_ms(500);
// unsigned char data = USART0_rx();
// USART0_tx(data);
int main(void)
{
    Init_USART();
  c4:	ec df       	rcall	.-40     	; 0x9e <Init_USART>
    DDRB = 0xFF;   // PORTB 전체 출력 (LED 8개)
  c6:	8f ef       	ldi	r24, 0xFF	; 255

    while (1)
    {
        unsigned char data = USART0_rx(); // 시리얼 입력
  c8:	87 bb       	out	0x17, r24	; 23
  ca:	f8 df       	rcall	.-16     	; 0xbc <USART0_rx>
        USART0_tx(data);                  // 에코 출력
  cc:	c8 2f       	mov	r28, r24
  ce:	f2 df       	rcall	.-28     	; 0xb4 <USART0_tx>
		if (data == '1') PORTB = 0x01;
  d0:	c1 33       	cpi	r28, 0x31	; 49
  d2:	19 f4       	brne	.+6      	; 0xda <main+0x16>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	f8 cf       	rjmp	.-16     	; 0xca <main+0x6>
            else if (data == '2') PORTB = 0x02;
  da:	c2 33       	cpi	r28, 0x32	; 50
  dc:	19 f4       	brne	.+6      	; 0xe4 <main+0x20>
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	f3 cf       	rjmp	.-26     	; 0xca <main+0x6>
            else if (data== '3') PORTB = 0x03;
  e4:	c3 33       	cpi	r28, 0x33	; 51
  e6:	19 f4       	brne	.+6      	; 0xee <main+0x2a>
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	ee cf       	rjmp	.-36     	; 0xca <main+0x6>
            else if (data == '4') PORTB = 0x04;
  ee:	c4 33       	cpi	r28, 0x34	; 52
  f0:	19 f4       	brne	.+6      	; 0xf8 <main+0x34>
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	e9 cf       	rjmp	.-46     	; 0xca <main+0x6>
            else if (data== '5') PORTB = 0x05;
  f8:	c5 33       	cpi	r28, 0x35	; 53
  fa:	19 f4       	brne	.+6      	; 0x102 <main+0x3e>
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	88 bb       	out	0x18, r24	; 24
 100:	e4 cf       	rjmp	.-56     	; 0xca <main+0x6>
            else if (data== '6') PORTB = 0x06;
 102:	c6 33       	cpi	r28, 0x36	; 54
 104:	19 f4       	brne	.+6      	; 0x10c <main+0x48>
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	88 bb       	out	0x18, r24	; 24
 10a:	df cf       	rjmp	.-66     	; 0xca <main+0x6>
            else if (data== '7') PORTB = 0x07;
 10c:	c7 33       	cpi	r28, 0x37	; 55
 10e:	19 f4       	brne	.+6      	; 0x116 <main+0x52>
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	88 bb       	out	0x18, r24	; 24
 114:	da cf       	rjmp	.-76     	; 0xca <main+0x6>
            else if (data== '8') PORTB = 0x08;
 116:	c8 33       	cpi	r28, 0x38	; 56
 118:	19 f4       	brne	.+6      	; 0x120 <main+0x5c>
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	d5 cf       	rjmp	.-86     	; 0xca <main+0x6>
            else if (data== '9') PORTB = 0x09;
 120:	c9 33       	cpi	r28, 0x39	; 57
 122:	99 f6       	brne	.-90     	; 0xca <main+0x6>
 124:	89 e0       	ldi	r24, 0x09	; 9
 126:	88 bb       	out	0x18, r24	; 24
 128:	d0 cf       	rjmp	.-96     	; 0xca <main+0x6>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
