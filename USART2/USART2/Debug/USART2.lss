
USART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000913  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000856  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000343  00000000  00000000  0000142d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	21 d0       	rcall	.+66     	; 0xf6 <main>
  b4:	69 c0       	rjmp	.+210    	; 0x188 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <Init_USART>:
#include <util/delay.h>
#include <avr/io.h>

void Init_USART()
{
	UCSR0A = 0x00;
  b8:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  ba:	88 e1       	ldi	r24, 0x18	; 24
  bc:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
  c4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x07;
  c8:	87 e0       	ldi	r24, 0x07	; 7
  ca:	89 b9       	out	0x09, r24	; 9
  cc:	08 95       	ret

000000ce <USART0_tx>:
}

void USART0_tx(unsigned char data)       // 송신
{
	while(!(UCSR0A & (1<<UDRE0)));
  ce:	5d 9b       	sbis	0x0b, 5	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <USART0_tx>
	UDR0 = data;
  d2:	8c b9       	out	0x0c, r24	; 12
  d4:	08 95       	ret

000000d6 <USART0_rx>:
}

unsigned char USART0_rx()                // 수신
{
	while(!(UCSR0A & (1<<RXC0)));
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <USART0_rx>
	return UDR0;
  da:	8c b1       	in	r24, 0x0c	; 12
}
  dc:	08 95       	ret

000000de <USART_str>:

void USART_str(unsigned char* str)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
	while(*str){
  e4:	02 c0       	rjmp	.+4      	; 0xea <USART_str+0xc>
		USART0_tx(*str++);
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	f2 df       	rcall	.-28     	; 0xce <USART0_tx>
	return UDR0;
}

void USART_str(unsigned char* str)
{
	while(*str){
  ea:	88 81       	ld	r24, Y
  ec:	81 11       	cpse	r24, r1
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <USART_str+0x8>
		USART0_tx(*str++);
	}
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
// // 		//USART0_tx(data);
// // 		_delay_ms(500);
// unsigned char data = USART0_rx();
// USART0_tx(data);
int main(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	61 97       	sbiw	r28, 0x11	; 17
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
    Init_USART();
 10a:	d6 df       	rcall	.-84     	; 0xb8 <Init_USART>
    DDRB = 0xFF;   // PORTB 전체 출력 (LED 8개)
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	87 bb       	out	0x17, r24	; 23
	unsigned char str[] = "Hello world!! \r\n";
 110:	81 e1       	ldi	r24, 0x11	; 17
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	de 01       	movw	r26, r28
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	01 90       	ld	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	8a 95       	dec	r24
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x24>
	USART_str(str);
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
    while (1)
    {
        unsigned char data = USART0_rx(); // 시리얼 입력
 126:	db df       	rcall	.-74     	; 0xde <USART_str>
 128:	d6 df       	rcall	.-84     	; 0xd6 <USART0_rx>
        USART0_tx(data);                  // 에코 출력
 12a:	18 2f       	mov	r17, r24
 12c:	d0 df       	rcall	.-96     	; 0xce <USART0_tx>
		if (data == '1') PORTB = 0x01;
 12e:	11 33       	cpi	r17, 0x31	; 49
 130:	19 f4       	brne	.+6      	; 0x138 <main+0x42>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	88 bb       	out	0x18, r24	; 24
 136:	f8 cf       	rjmp	.-16     	; 0x128 <main+0x32>
            else if (data == '2') PORTB = 0x02;
 138:	12 33       	cpi	r17, 0x32	; 50
 13a:	19 f4       	brne	.+6      	; 0x142 <main+0x4c>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	88 bb       	out	0x18, r24	; 24
 140:	f3 cf       	rjmp	.-26     	; 0x128 <main+0x32>
            else if (data== '3') PORTB = 0x03;
 142:	13 33       	cpi	r17, 0x33	; 51
 144:	19 f4       	brne	.+6      	; 0x14c <main+0x56>
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	88 bb       	out	0x18, r24	; 24
 14a:	ee cf       	rjmp	.-36     	; 0x128 <main+0x32>
            else if (data == '4') PORTB = 0x04;
 14c:	14 33       	cpi	r17, 0x34	; 52
 14e:	19 f4       	brne	.+6      	; 0x156 <main+0x60>
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	88 bb       	out	0x18, r24	; 24
 154:	e9 cf       	rjmp	.-46     	; 0x128 <main+0x32>
            else if (data== '5') PORTB = 0x05;
 156:	15 33       	cpi	r17, 0x35	; 53
 158:	19 f4       	brne	.+6      	; 0x160 <main+0x6a>
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	e4 cf       	rjmp	.-56     	; 0x128 <main+0x32>
            else if (data== '6') PORTB = 0x06;
 160:	16 33       	cpi	r17, 0x36	; 54
 162:	19 f4       	brne	.+6      	; 0x16a <main+0x74>
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	88 bb       	out	0x18, r24	; 24
 168:	df cf       	rjmp	.-66     	; 0x128 <main+0x32>
            else if (data== '7') PORTB = 0x07;
 16a:	17 33       	cpi	r17, 0x37	; 55
 16c:	19 f4       	brne	.+6      	; 0x174 <main+0x7e>
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	88 bb       	out	0x18, r24	; 24
 172:	da cf       	rjmp	.-76     	; 0x128 <main+0x32>
            else if (data== '8') PORTB = 0x08;
 174:	18 33       	cpi	r17, 0x38	; 56
 176:	19 f4       	brne	.+6      	; 0x17e <main+0x88>
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	88 bb       	out	0x18, r24	; 24
 17c:	d5 cf       	rjmp	.-86     	; 0x128 <main+0x32>
            else if (data== '9') PORTB = 0x09;
 17e:	19 33       	cpi	r17, 0x39	; 57
 180:	99 f6       	brne	.-90     	; 0x128 <main+0x32>
 182:	89 e0       	ldi	r24, 0x09	; 9
 184:	88 bb       	out	0x18, r24	; 24
 186:	d0 cf       	rjmp	.-96     	; 0x128 <main+0x32>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
