
ACD_pt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2f  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000897  00000000  00000000  00000d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039c  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ed  00000000  00000000  00001ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000020cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	75 c0       	rjmp	.+234    	; 0x140 <__vector_21>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 31       	cpi	r26, 0x13	; 19
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6a d0       	rcall	.+212    	; 0x17e <main>
  aa:	bd c0       	rjmp	.+378    	; 0x226 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <timer2_init>:

volatile uint16_t adc_value = 0;

// Timer2: 소프트웨어 PWM
void timer2_init(void) {
	TCCR2 = (1 << WGM21) | (1 << CS22); // CTC 모드, 분주 64
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	85 bd       	out	0x25, r24	; 37
	OCR2  = 300;                        // 2kHz
  b2:	8c e2       	ldi	r24, 0x2C	; 44
  b4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);              // 비교 일치 인터럽트 허용
  b6:	87 b7       	in	r24, 0x37	; 55
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	87 bf       	out	0x37, r24	; 55
  bc:	08 95       	ret

000000be <__vector_9>:
}

ISR(TIMER2_COMP_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	0b b6       	in	r0, 0x3b	; 59
  ca:	0f 92       	push	r0
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	pwm_phase++;
  da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pwm_phase>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pwm_phase>
	if (pwm_phase >= PWM_STEPS) pwm_phase = 0;
  e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pwm_phase>
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	10 f0       	brcs	.+4      	; 0xf0 <__vector_9+0x32>
  ec:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pwm_phase>

	uint8_t bits = 0;
	for (uint8_t i = 0; i < 8; i++) {
  f0:	80 e0       	ldi	r24, 0x00	; 0

ISR(TIMER2_COMP_vect) {
	pwm_phase++;
	if (pwm_phase >= PWM_STEPS) pwm_phase = 0;

	uint8_t bits = 0;
  f2:	40 e0       	ldi	r20, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
  f4:	13 c0       	rjmp	.+38     	; 0x11c <__vector_9+0x5e>
		if (led_level[i] > pwm_phase) bits |= (1u << i);
  f6:	e8 2f       	mov	r30, r24
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	e6 5f       	subi	r30, 0xF6	; 246
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	20 81       	ld	r18, Z
 100:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <pwm_phase>
 104:	92 17       	cp	r25, r18
 106:	48 f4       	brcc	.+18     	; 0x11a <__vector_9+0x5c>
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	08 2e       	mov	r0, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__vector_9+0x56>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <__vector_9+0x52>
 118:	42 2b       	or	r20, r18
ISR(TIMER2_COMP_vect) {
	pwm_phase++;
	if (pwm_phase >= PWM_STEPS) pwm_phase = 0;

	uint8_t bits = 0;
	for (uint8_t i = 0; i < 8; i++) {
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	58 f3       	brcs	.-42     	; 0xf6 <__vector_9+0x38>
		if (led_level[i] > pwm_phase) bits |= (1u << i);
	}

	#if LED_ACTIVE_LOW
	PORTB = ~bits;
 120:	40 95       	com	r20
 122:	48 bb       	out	0x18, r20	; 24
	#else
	PORTB = bits;
	#endif
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0b be       	out	0x3b, r0	; 59
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_21>:

// ADC 완료 인터럽트
ISR(ADC_vect) {
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
	adc_value = ADCW;           // 0~1023
 14e:	84 b1       	in	r24, 0x04	; 4
 150:	95 b1       	in	r25, 0x05	; 5
 152:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1 << ADSC);      // 다음 변환 시작
 15a:	86 b1       	in	r24, 0x06	; 6
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	86 b9       	out	0x06, r24	; 6
}
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <adc_init>:

void adc_init(void) {
	ADMUX  = (1 << REFS0) | (0 << MUX0); // AVCC 기준 전압, ADC0 사용
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0); // 128분주, 인터럽트
 172:	8f e8       	ldi	r24, 0x8F	; 143
 174:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC); // 첫 변환 시작
 176:	86 b1       	in	r24, 0x06	; 6
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	86 b9       	out	0x06, r24	; 6
 17c:	08 95       	ret

0000017e <main>:
	}
}

int main(void) {
	// LED 출력
	DDRB = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	87 bb       	out	0x17, r24	; 23
	#if LED_ACTIVE_LOW
	PORTB = 0xFF;
 182:	88 bb       	out	0x18, r24	; 24
	#else
	PORTB = 0x00;
	#endif

	// 버튼 입력은 이번엔 사용 안함 (필요 시 추가 가능)
	DDRD = 0x00;
 184:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;
 186:	82 bb       	out	0x12, r24	; 18

	timer2_init();
 188:	92 df       	rcall	.-220    	; 0xae <timer2_init>
	adc_init();
 18a:	f1 df       	rcall	.-30     	; 0x16e <adc_init>
 18c:	78 94       	sei
	sei();
 18e:	20 e0       	ldi	r18, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
		led_target[i] = brightness;
	}
}

int main(void) {
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1 << ADSC); // 첫 변환 시작
}

static inline void update_targets_from_adc(void) {
	// ADC 값 (0~1023)을 PWM_STEPS(0~16)로 매핑
	uint8_t brightness = (adc_value * PWM_STEPS) / 1024;
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19a:	82 95       	swap	r24
 19c:	92 95       	swap	r25
 19e:	90 7f       	andi	r25, 0xF0	; 240
 1a0:	98 27       	eor	r25, r24
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	98 27       	eor	r25, r24
 1a6:	96 95       	lsr	r25
 1a8:	96 95       	lsr	r25
 1aa:	91 31       	cpi	r25, 0x11	; 17
	if (brightness > PWM_STEPS) brightness = PWM_STEPS;
 1ac:	08 f0       	brcs	.+2      	; 0x1b0 <main+0x32>
 1ae:	90 e1       	ldi	r25, 0x10	; 16
 1b0:	80 e0       	ldi	r24, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++) {
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <main+0x42>
 1b4:	e8 2f       	mov	r30, r24
		led_target[i] = brightness;
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ee 5f       	subi	r30, 0xFE	; 254
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	90 83       	st	Z, r25
 1be:	8f 5f       	subi	r24, 0xFF	; 255
static inline void update_targets_from_adc(void) {
	// ADC 값 (0~1023)을 PWM_STEPS(0~16)로 매핑
	uint8_t brightness = (adc_value * PWM_STEPS) / 1024;
	if (brightness > PWM_STEPS) brightness = PWM_STEPS;

	for (uint8_t i = 0; i < 8; i++) {
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	c0 f3       	brcs	.-16     	; 0x1b4 <main+0x36>
 1c4:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	9f e1       	ldi	r25, 0x1F	; 31
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x4a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x50>
 1ce:	00 00       	nop
 1d0:	2e 5f       	subi	r18, 0xFE	; 254

	while (1) {
		update_targets_from_adc();

		_delay_ms(2);
		ramp_timer += 2;
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255
 1d4:	24 31       	cpi	r18, 0x14	; 20
		if (ramp_timer >= RAMP_STEP_MS) {
 1d6:	31 05       	cpc	r19, r1
 1d8:	e0 f2       	brcs	.-72     	; 0x192 <main+0x14>
 1da:	21 c0       	rjmp	.+66     	; 0x21e <main+0xa0>
 1dc:	82 2f       	mov	r24, r18
			ramp_timer = 0;
			for (uint8_t i = 0; i < 8; i++) {
				if (led_level[i] < led_target[i]) led_level[i]++;
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	e6 5f       	subi	r30, 0xF6	; 246
 1e4:	fe 4f       	sbci	r31, 0xFE	; 254
 1e6:	40 81       	ld	r20, Z
 1e8:	fc 01       	movw	r30, r24
 1ea:	ee 5f       	subi	r30, 0xFE	; 254
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	30 81       	ld	r19, Z
 1f0:	43 17       	cp	r20, r19
 1f2:	38 f4       	brcc	.+14     	; 0x202 <main+0x84>
 1f4:	fc 01       	movw	r30, r24
 1f6:	e6 5f       	subi	r30, 0xF6	; 246
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 83       	st	Z, r24
 200:	0c c0       	rjmp	.+24     	; 0x21a <main+0x9c>
 202:	fc 01       	movw	r30, r24
				else if (led_level[i] > led_target[i]) led_level[i]--;
 204:	e6 5f       	subi	r30, 0xF6	; 246
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	40 81       	ld	r20, Z
 20a:	34 17       	cp	r19, r20
 20c:	30 f4       	brcc	.+12     	; 0x21a <main+0x9c>
 20e:	fc 01       	movw	r30, r24
 210:	e6 5f       	subi	r30, 0xF6	; 246
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	80 81       	ld	r24, Z
 216:	81 50       	subi	r24, 0x01	; 1
 218:	80 83       	st	Z, r24
 21a:	2f 5f       	subi	r18, 0xFF	; 255

		_delay_ms(2);
		ramp_timer += 2;
		if (ramp_timer >= RAMP_STEP_MS) {
			ramp_timer = 0;
			for (uint8_t i = 0; i < 8; i++) {
 21c:	01 c0       	rjmp	.+2      	; 0x220 <main+0xa2>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	28 30       	cpi	r18, 0x08	; 8
 222:	e0 f2       	brcs	.-72     	; 0x1dc <main+0x5e>
 224:	b4 cf       	rjmp	.-152    	; 0x18e <main+0x10>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
