
MOUproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00000bba  00000c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008001b4  008001b4  00000d02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e9  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6a  00000000  00000000  00002031  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e6  00000000  00000000  00002a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00003184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f4  00000000  00000000  000032f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a6  00000000  00000000  000037ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 3b       	cpi	r26, 0xB4	; 180
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 eb       	ldi	r26, 0xB4	; 180
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 3c       	cpi	r26, 0xC2	; 194
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	66 d1       	rcall	.+716    	; 0x390 <main>
  c4:	78 c5       	rjmp	.+2800   	; 0xbb6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Port_Init>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"

void Port_Init(void){
	DDRB = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x0F;
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  d2:	08 95       	ret

000000d4 <LCD_Data>:
}

void LCD_Data(Byte ch){
	LCD_CTRL |= (1<<LCD_RS);
  d4:	e5 e6       	ldi	r30, 0x65	; 101
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	91 60       	ori	r25, 0x01	; 1
  dc:	90 83       	st	Z, r25
	LCD_CTRL &= ~(1<<LCD_RW);
  de:	90 81       	ld	r25, Z
  e0:	9d 7f       	andi	r25, 0xFD	; 253
  e2:	90 83       	st	Z, r25
	LCD_CTRL |= (1<<LCD_EN);
  e4:	90 81       	ld	r25, Z
  e6:	94 60       	ori	r25, 0x04	; 4
  e8:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	96 ef       	ldi	r25, 0xF6	; 246
  ec:	9a 95       	dec	r25
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_Data+0x18>
	_delay_us(50);
	LCD_WDATA = ch;
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	86 ef       	ldi	r24, 0xF6	; 246
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_Data+0x20>
	_delay_us(50);
	LCD_CTRL &= ~(1<<LCD_EN);
  f8:	80 81       	ld	r24, Z
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <LCD_Comm>:
}

void LCD_Comm(Byte ch){
	LCD_CTRL &= ~(1<<LCD_RS);
 100:	e5 e6       	ldi	r30, 0x65	; 101
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	9e 7f       	andi	r25, 0xFE	; 254
 108:	90 83       	st	Z, r25
	LCD_CTRL &= ~(1<<LCD_RW);
 10a:	90 81       	ld	r25, Z
 10c:	9d 7f       	andi	r25, 0xFD	; 253
 10e:	90 83       	st	Z, r25
	LCD_CTRL |= (1<< LCD_EN);
 110:	90 81       	ld	r25, Z
 112:	94 60       	ori	r25, 0x04	; 4
 114:	90 83       	st	Z, r25
 116:	96 ef       	ldi	r25, 0xF6	; 246
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Comm+0x18>
	_delay_us(50);
	LCD_WINST = ch;
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	86 ef       	ldi	r24, 0xF6	; 246
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_Comm+0x20>
	_delay_us(50);
	LCD_CTRL &= ~(1<<LCD_EN);
 124:	80 81       	ld	r24, Z
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <LCD_CHAR>:
}

void LCD_CHAR(Byte c){
	LCD_Data(c);
 12c:	d3 df       	rcall	.-90     	; 0xd4 <LCD_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	86 e6       	ldi	r24, 0x66	; 102
 130:	9e e0       	ldi	r25, 0x0E	; 14
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_CHAR+0x6>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <LCD_STR>:
	_delay_ms(1);
}

void LCD_STR(char *str){
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	ec 01       	movw	r28, r24
	while(*str != 0){
 140:	02 c0       	rjmp	.+4      	; 0x146 <LCD_STR+0xc>
		LCD_CHAR(*str);
 142:	f4 df       	rcall	.-24     	; 0x12c <LCD_CHAR>
		str++;
 144:	21 96       	adiw	r28, 0x01	; 1
	LCD_Data(c);
	_delay_ms(1);
}

void LCD_STR(char *str){
	while(*str != 0){
 146:	88 81       	ld	r24, Y
 148:	81 11       	cpse	r24, r1
 14a:	fb cf       	rjmp	.-10     	; 0x142 <LCD_STR+0x8>
		LCD_CHAR(*str);
		str++;
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_pos>:

void LCD_pos(unsigned char col, unsigned char row){
	LCD_Comm(0x80 | (row + col*0x40));
 152:	90 e4       	ldi	r25, 0x40	; 64
 154:	89 9f       	mul	r24, r25
 156:	60 0d       	add	r22, r0
 158:	11 24       	eor	r1, r1
 15a:	86 2f       	mov	r24, r22
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	d0 cf       	rjmp	.-96     	; 0x100 <LCD_Comm>
 160:	08 95       	ret

00000162 <LCD_Clear>:
}

void LCD_Clear(void){
	LCD_Comm(0x01);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	cd df       	rcall	.-102    	; 0x100 <LCD_Comm>
 166:	8c ec       	ldi	r24, 0xCC	; 204
 168:	9c e1       	ldi	r25, 0x1C	; 28
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Clear+0x8>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Clear+0xe>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init(void){
	LCD_Comm(0x38);
 174:	88 e3       	ldi	r24, 0x38	; 56
 176:	c4 df       	rcall	.-120    	; 0x100 <LCD_Comm>
 178:	8c ec       	ldi	r24, 0xCC	; 204
 17a:	9c e1       	ldi	r25, 0x1C	; 28
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_Init+0x8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_Init+0xe>
 182:	00 00       	nop
	_delay_ms(2);
	LCD_Comm(0x38);
 184:	88 e3       	ldi	r24, 0x38	; 56
 186:	bc df       	rcall	.-136    	; 0x100 <LCD_Comm>
 188:	8c ec       	ldi	r24, 0xCC	; 204
 18a:	9c e1       	ldi	r25, 0x1C	; 28
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Init+0x18>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Init+0x1e>
	_delay_ms(2);
	LCD_Comm(0x38);
 192:	00 00       	nop
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	b4 df       	rcall	.-152    	; 0x100 <LCD_Comm>
 198:	8c ec       	ldi	r24, 0xCC	; 204
 19a:	9c e1       	ldi	r25, 0x1C	; 28
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Init+0x28>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Init+0x2e>
	_delay_ms(2);
	LCD_Comm(0x0e);
 1a2:	00 00       	nop
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	ac df       	rcall	.-168    	; 0x100 <LCD_Comm>
 1a8:	8c ec       	ldi	r24, 0xCC	; 204
 1aa:	9c e1       	ldi	r25, 0x1C	; 28
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Init+0x38>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_Init+0x3e>
	_delay_ms(2);
	LCD_Comm(0x06);
 1b2:	00 00       	nop
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	a4 df       	rcall	.-184    	; 0x100 <LCD_Comm>
 1b8:	8c ec       	ldi	r24, 0xCC	; 204
 1ba:	9c e1       	ldi	r25, 0x1C	; 28
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x48>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0x4e>
	_delay_ms(2);
	LCD_Clear();
 1c2:	00 00       	nop
 1c4:	ce cf       	rjmp	.-100    	; 0x162 <LCD_Clear>
 1c6:	08 95       	ret

000001c8 <UART_init>:
#include <string.h>
#include "Lcd/lcd.h"   // LCD 라이브러리 포함

// ====================== UART ======================
void UART_init(void){
	DDRE |= (1<<PE0);    // TXD0 출력
 1c8:	82 b1       	in	r24, 0x02	; 2
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	82 b9       	out	0x02, r24	; 2
	DDRE &= ~(1<<PE1);   // RXD0 입력
 1ce:	82 b1       	in	r24, 0x02	; 2
 1d0:	8d 7f       	andi	r24, 0xFD	; 253
 1d2:	82 b9       	out	0x02, r24	; 2

	unsigned int ubrr = 7; // 115200bps @ 14.7456MHz
	UBRR0H = (unsigned char)(ubrr >> 8);
 1d4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	89 b9       	out	0x09, r24	; 9

	UCSR0A = 0x00;
 1dc:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);   // 송수신 enable
 1de:	88 e1       	ldi	r24, 0x18	; 24
 1e0:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8bit, 1 stop, no parity
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 1e8:	08 95       	ret

000001ea <UART_transmit>:
}

void UART_transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 1ea:	5d 9b       	sbis	0x0b, 5	; 11
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <UART_transmit>
	UDR0 = data;
 1ee:	8c b9       	out	0x0c, r24	; 12
 1f0:	08 95       	ret

000001f2 <UART_receive>:
}

unsigned char UART_receive(void){
	while(!(UCSR0A & (1<<RXC0)));
 1f2:	5f 9b       	sbis	0x0b, 7	; 11
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <UART_receive>
	return UDR0;
 1f6:	8c b1       	in	r24, 0x0c	; 12
}
 1f8:	08 95       	ret

000001fa <UART_print>:

void UART_print(const char *str){
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	while(*str) UART_transmit(*str++);
 200:	02 c0       	rjmp	.+4      	; 0x206 <UART_print+0xc>
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	f2 df       	rcall	.-28     	; 0x1ea <UART_transmit>
 206:	88 81       	ld	r24, Y
 208:	81 11       	cpse	r24, r1
 20a:	fb cf       	rjmp	.-10     	; 0x202 <UART_print+0x8>
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <generateAnswer>:
char answer[5];
char input[5];
int idx = 0;
int attempt = 0;

void generateAnswer(uint8_t announce){
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	2a 97       	sbiw	r28, 0x0a	; 10
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	f8 2e       	mov	r15, r24
	char used[10] = {0};
 22e:	fe 01       	movw	r30, r28
 230:	31 96       	adiw	r30, 0x01	; 1
 232:	8a e0       	ldi	r24, 0x0A	; 10
 234:	df 01       	movw	r26, r30
 236:	1d 92       	st	X+, r1
 238:	8a 95       	dec	r24
 23a:	e9 f7       	brne	.-6      	; 0x236 <generateAnswer+0x24>
	for(int i=0;i<4;i++){
 23c:	00 e0       	ldi	r16, 0x00	; 0
 23e:	10 e0       	ldi	r17, 0x00	; 0
 240:	1d c0       	rjmp	.+58     	; 0x27c <generateAnswer+0x6a>
		int r;
		do{
			r = rand()%10;
 242:	73 d1       	rcall	.+742    	; 0x52a <rand>
 244:	6a e0       	ldi	r22, 0x0A	; 10
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	02 d1       	rcall	.+516    	; 0x44e <__divmodhi4>
 24a:	9c 01       	movw	r18, r24
		}while(used[r]);
 24c:	e1 e0       	ldi	r30, 0x01	; 1
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	ec 0f       	add	r30, r28
 252:	fd 1f       	adc	r31, r29
 254:	e8 0f       	add	r30, r24
 256:	f9 1f       	adc	r31, r25
 258:	80 81       	ld	r24, Z
 25a:	81 11       	cpse	r24, r1
 25c:	f2 cf       	rjmp	.-28     	; 0x242 <generateAnswer+0x30>
		used[r] = 1;
 25e:	e1 e0       	ldi	r30, 0x01	; 1
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e2 0f       	add	r30, r18
 268:	f3 1f       	adc	r31, r19
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 83       	st	Z, r24
		answer[i] = '0'+r;
 26e:	f8 01       	movw	r30, r16
 270:	e3 54       	subi	r30, 0x43	; 67
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	20 5d       	subi	r18, 0xD0	; 208
 276:	20 83       	st	Z, r18
int idx = 0;
int attempt = 0;

void generateAnswer(uint8_t announce){
	char used[10] = {0};
	for(int i=0;i<4;i++){
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	04 30       	cpi	r16, 0x04	; 4
 27e:	11 05       	cpc	r17, r1
 280:	04 f3       	brlt	.-64     	; 0x242 <generateAnswer+0x30>
			r = rand()%10;
		}while(used[r]);
		used[r] = 1;
		answer[i] = '0'+r;
	}
	answer[4] = '\0';
 282:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <answer+0x4>

	if(announce){
 286:	ff 20       	and	r15, r15
 288:	19 f0       	breq	.+6      	; 0x290 <generateAnswer+0x7e>
		UART_print("[Game] New Answer Generated\r\n");
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	b5 df       	rcall	.-150    	; 0x1fa <UART_print>
	}
}
 290:	2a 96       	adiw	r28, 0x0a	; 10
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	08 95       	ret

000002a8 <checkAnswer>:

void checkAnswer(char *guess){
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	a0 97       	sbiw	r28, 0x20	; 32
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	7c 01       	movw	r14, r24
	int strike=0, ball=0;
	for(int i=0;i<4;i++){
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
		UART_print("[Game] New Answer Generated\r\n");
	}
}

void checkAnswer(char *guess){
	int strike=0, ball=0;
 2ca:	a0 e0       	ldi	r26, 0x00	; 0
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	00 e0       	ldi	r16, 0x00	; 0
 2d0:	10 e0       	ldi	r17, 0x00	; 0
	for(int i=0;i<4;i++){
 2d2:	21 c0       	rjmp	.+66     	; 0x316 <checkAnswer+0x6e>
		if(guess[i]==answer[i]) strike++;
 2d4:	f7 01       	movw	r30, r14
 2d6:	e4 0f       	add	r30, r20
 2d8:	f5 1f       	adc	r31, r21
 2da:	60 81       	ld	r22, Z
 2dc:	fa 01       	movw	r30, r20
 2de:	e3 54       	subi	r30, 0x43	; 67
 2e0:	fe 4f       	sbci	r31, 0xFE	; 254
 2e2:	90 81       	ld	r25, Z
 2e4:	69 13       	cpse	r22, r25
 2e6:	10 c0       	rjmp	.+32     	; 0x308 <checkAnswer+0x60>
 2e8:	0f 5f       	subi	r16, 0xFF	; 255
 2ea:	1f 4f       	sbci	r17, 0xFF	; 255
 2ec:	12 c0       	rjmp	.+36     	; 0x312 <checkAnswer+0x6a>
		else{
			for(int j=0;j<4;j++){
				if(i!=j && guess[i]==answer[j]) ball++;
 2ee:	42 17       	cp	r20, r18
 2f0:	53 07       	cpc	r21, r19
 2f2:	39 f0       	breq	.+14     	; 0x302 <checkAnswer+0x5a>
 2f4:	f9 01       	movw	r30, r18
 2f6:	e3 54       	subi	r30, 0x43	; 67
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	90 81       	ld	r25, Z
 2fc:	69 13       	cpse	r22, r25
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <checkAnswer+0x5a>
 300:	11 96       	adiw	r26, 0x01	; 1
void checkAnswer(char *guess){
	int strike=0, ball=0;
	for(int i=0;i<4;i++){
		if(guess[i]==answer[i]) strike++;
		else{
			for(int j=0;j<4;j++){
 302:	2f 5f       	subi	r18, 0xFF	; 255
 304:	3f 4f       	sbci	r19, 0xFF	; 255
 306:	02 c0       	rjmp	.+4      	; 0x30c <checkAnswer+0x64>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	24 30       	cpi	r18, 0x04	; 4
 30e:	31 05       	cpc	r19, r1
 310:	74 f3       	brlt	.-36     	; 0x2ee <checkAnswer+0x46>
	}
}

void checkAnswer(char *guess){
	int strike=0, ball=0;
	for(int i=0;i<4;i++){
 312:	4f 5f       	subi	r20, 0xFF	; 255
 314:	5f 4f       	sbci	r21, 0xFF	; 255
 316:	44 30       	cpi	r20, 0x04	; 4
 318:	51 05       	cpc	r21, r1
 31a:	e4 f2       	brlt	.-72     	; 0x2d4 <checkAnswer+0x2c>
			}
		}
	}

	char buf[32];
	sprintf(buf,"%s -> %dS %dB", guess, strike, ball);
 31c:	bf 93       	push	r27
 31e:	af 93       	push	r26
 320:	1f 93       	push	r17
 322:	0f 93       	push	r16
 324:	ff 92       	push	r15
 326:	ef 92       	push	r14
 328:	82 e2       	ldi	r24, 0x22	; 34
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	9f 93       	push	r25
 32e:	8f 93       	push	r24
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	7c 01       	movw	r14, r24
 336:	9f 93       	push	r25
 338:	8f 93       	push	r24
 33a:	05 d1       	rcall	.+522    	; 0x546 <sprintf>
	UART_print(buf);
 33c:	c7 01       	movw	r24, r14
 33e:	5d df       	rcall	.-326    	; 0x1fa <UART_print>
	UART_print("\r\n");
 340:	81 e4       	ldi	r24, 0x41	; 65
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	5a df       	rcall	.-332    	; 0x1fa <UART_print>

	if(strike==4){
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	04 30       	cpi	r16, 0x04	; 4
 352:	11 05       	cpc	r17, r1
		// 정답 맞춤
		UART_print("[Game] HOME RUN!!\r\n");
 354:	81 f4       	brne	.+32     	; 0x376 <checkAnswer+0xce>
 356:	80 e3       	ldi	r24, 0x30	; 48
 358:	91 e0       	ldi	r25, 0x01	; 1

		LCD_Clear();
 35a:	4f df       	rcall	.-354    	; 0x1fa <UART_print>
 35c:	02 df       	rcall	.-508    	; 0x162 <LCD_Clear>
		LCD_pos(0,0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
		LCD_STR("Mission Success");
 362:	f7 de       	rcall	.-530    	; 0x152 <LCD_pos>
 364:	84 e4       	ldi	r24, 0x44	; 68
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	e8 de       	rcall	.-560    	; 0x13a <LCD_STR>

		generateAnswer(1);  // 새 답 생성
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	52 df       	rcall	.-348    	; 0x212 <generateAnswer>
 36e:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <__data_end+0x1>
		attempt = 0;
 372:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
 376:	a0 96       	adiw	r28, 0x20	; 32
	}
}
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <main>:
 390:	1b df       	rcall	.-458    	; 0x1c8 <UART_init>

// ====================== Main ======================
int main(void){
	
	UART_init();
	Port_Init();   // LCD 핀 출력 설정
 392:	9a de       	rcall	.-716    	; 0xc8 <Port_Init>
	LCD_Init();    // LCD 초기화
 394:	ef de       	rcall	.-546    	; 0x174 <LCD_Init>

	UART_print("[Game] Baseball Game Start!\r\n");
 396:	84 e5       	ldi	r24, 0x54	; 84
 398:	91 e0       	ldi	r25, 0x01	; 1
	generateAnswer(1);
 39a:	2f df       	rcall	.-418    	; 0x1fa <UART_print>
 39c:	81 e0       	ldi	r24, 0x01	; 1

	while(1){
		char key = UART_receive();
 39e:	39 df       	rcall	.-398    	; 0x212 <generateAnswer>
 3a0:	28 df       	rcall	.-432    	; 0x1f2 <UART_receive>

		// * 입력 시 게임 초기화
		if(key == '*'){
 3a2:	8a 32       	cpi	r24, 0x2A	; 42
 3a4:	a9 f4       	brne	.+42     	; 0x3d0 <main+0x40>
			generateAnswer(1);
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	34 df       	rcall	.-408    	; 0x212 <generateAnswer>
 3aa:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <__data_end+0x1>
			attempt = 0;
 3ae:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
			idx = 0;
 3b2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <idx+0x1>
 3b6:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <idx>
			UART_print("[Game] Reset by *\r\n");
 3ba:	82 e7       	ldi	r24, 0x72	; 114
 3bc:	91 e0       	ldi	r25, 0x01	; 1

			LCD_Clear();
 3be:	1d df       	rcall	.-454    	; 0x1fa <UART_print>
 3c0:	d0 de       	rcall	.-608    	; 0x162 <LCD_Clear>
			LCD_pos(0,0);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	c5 de       	rcall	.-630    	; 0x152 <LCD_pos>
 3c8:	86 e8       	ldi	r24, 0x86	; 134
			LCD_STR("Game Reset!");
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	b6 de       	rcall	.-660    	; 0x13a <LCD_STR>
 3ce:	e8 cf       	rjmp	.-48     	; 0x3a0 <main+0x10>
 3d0:	90 ed       	ldi	r25, 0xD0	; 208
			continue;
 3d2:	98 0f       	add	r25, r24
		}

		// 숫자만 입력 허용
		if(key >= '0' && key <= '9'){
 3d4:	9a 30       	cpi	r25, 0x0A	; 10
 3d6:	78 f4       	brcc	.+30     	; 0x3f6 <main+0x66>
 3d8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <idx>
			input[idx++] = key;
 3dc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <idx+0x1>
 3e0:	a9 01       	movw	r20, r18
 3e2:	4f 5f       	subi	r20, 0xFF	; 255
 3e4:	5f 4f       	sbci	r21, 0xFF	; 255
 3e6:	50 93 b7 01 	sts	0x01B7, r21	; 0x8001b7 <idx+0x1>
 3ea:	40 93 b6 01 	sts	0x01B6, r20	; 0x8001b6 <idx>
 3ee:	f9 01       	movw	r30, r18
 3f0:	e8 54       	subi	r30, 0x48	; 72
 3f2:	fe 4f       	sbci	r31, 0xFE	; 254
 3f4:	80 83       	st	Z, r24
 3f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <idx>
		}

		// 4자리 입력되면 자동 채점
		if(idx == 4){
 3fa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <idx+0x1>
 3fe:	04 97       	sbiw	r24, 0x04	; 4
 400:	79 f6       	brne	.-98     	; 0x3a0 <main+0x10>
 402:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <input+0x4>
			input[4] = '\0';
 406:	88 eb       	ldi	r24, 0xB8	; 184
			checkAnswer(input);
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	4e df       	rcall	.-356    	; 0x2a8 <checkAnswer>
 40c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <idx+0x1>
			idx = 0;
 410:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <idx>
 414:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
			attempt++;
 418:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <__data_end+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <__data_end+0x1>
 422:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>

			if(attempt >= 10){
 426:	0a 97       	sbiw	r24, 0x0a	; 10
				UART_print("[Game] FAIL: Max attempts\r\n");
 428:	0c f4       	brge	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	ba cf       	rjmp	.-140    	; 0x3a0 <main+0x10>
 42c:	82 e9       	ldi	r24, 0x92	; 146
 42e:	91 e0       	ldi	r25, 0x01	; 1

				LCD_Clear();
 430:	e4 de       	rcall	.-568    	; 0x1fa <UART_print>
 432:	97 de       	rcall	.-722    	; 0x162 <LCD_Clear>
				LCD_pos(0,0);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	8c de       	rcall	.-744    	; 0x152 <LCD_pos>
 43a:	8e ea       	ldi	r24, 0xAE	; 174
				LCD_STR("Fail");
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	7d de       	rcall	.-774    	; 0x13a <LCD_STR>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	e7 de       	rcall	.-562    	; 0x212 <generateAnswer>

				generateAnswer(1);
 444:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <__data_end+0x1>
 448:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
				attempt = 0;
 44c:	a9 cf       	rjmp	.-174    	; 0x3a0 <main+0x10>

0000044e <__divmodhi4>:
 44e:	97 fb       	bst	r25, 7
 450:	07 2e       	mov	r0, r23
 452:	16 f4       	brtc	.+4      	; 0x458 <__divmodhi4+0xa>
 454:	00 94       	com	r0
 456:	06 d0       	rcall	.+12     	; 0x464 <__divmodhi4_neg1>
 458:	77 fd       	sbrc	r23, 7
 45a:	08 d0       	rcall	.+16     	; 0x46c <__divmodhi4_neg2>
 45c:	0b d0       	rcall	.+22     	; 0x474 <__udivmodhi4>
 45e:	07 fc       	sbrc	r0, 7
 460:	05 d0       	rcall	.+10     	; 0x46c <__divmodhi4_neg2>
 462:	3e f4       	brtc	.+14     	; 0x472 <__divmodhi4_exit>

00000464 <__divmodhi4_neg1>:
 464:	90 95       	com	r25
 466:	81 95       	neg	r24
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	08 95       	ret

0000046c <__divmodhi4_neg2>:
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255

00000472 <__divmodhi4_exit>:
 472:	08 95       	ret

00000474 <__udivmodhi4>:
 474:	aa 1b       	sub	r26, r26
 476:	bb 1b       	sub	r27, r27
 478:	51 e1       	ldi	r21, 0x11	; 17
 47a:	07 c0       	rjmp	.+14     	; 0x48a <__udivmodhi4_ep>

0000047c <__udivmodhi4_loop>:
 47c:	aa 1f       	adc	r26, r26
 47e:	bb 1f       	adc	r27, r27
 480:	a6 17       	cp	r26, r22
 482:	b7 07       	cpc	r27, r23
 484:	10 f0       	brcs	.+4      	; 0x48a <__udivmodhi4_ep>
 486:	a6 1b       	sub	r26, r22
 488:	b7 0b       	sbc	r27, r23

0000048a <__udivmodhi4_ep>:
 48a:	88 1f       	adc	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	5a 95       	dec	r21
 490:	a9 f7       	brne	.-22     	; 0x47c <__udivmodhi4_loop>
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	08 95       	ret

0000049c <do_rand>:
 49c:	8f 92       	push	r8
 49e:	9f 92       	push	r9
 4a0:	af 92       	push	r10
 4a2:	bf 92       	push	r11
 4a4:	cf 92       	push	r12
 4a6:	df 92       	push	r13
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	ec 01       	movw	r28, r24
 4b2:	68 81       	ld	r22, Y
 4b4:	79 81       	ldd	r23, Y+1	; 0x01
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	9b 81       	ldd	r25, Y+3	; 0x03
 4ba:	61 15       	cp	r22, r1
 4bc:	71 05       	cpc	r23, r1
 4be:	81 05       	cpc	r24, r1
 4c0:	91 05       	cpc	r25, r1
 4c2:	21 f4       	brne	.+8      	; 0x4cc <do_rand+0x30>
 4c4:	64 e2       	ldi	r22, 0x24	; 36
 4c6:	79 ed       	ldi	r23, 0xD9	; 217
 4c8:	8b e5       	ldi	r24, 0x5B	; 91
 4ca:	97 e0       	ldi	r25, 0x07	; 7
 4cc:	2d e1       	ldi	r18, 0x1D	; 29
 4ce:	33 ef       	ldi	r19, 0xF3	; 243
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	13 d3       	rcall	.+1574   	; 0xafc <__divmodsi4>
 4d6:	49 01       	movw	r8, r18
 4d8:	5a 01       	movw	r10, r20
 4da:	9b 01       	movw	r18, r22
 4dc:	ac 01       	movw	r20, r24
 4de:	a7 ea       	ldi	r26, 0xA7	; 167
 4e0:	b1 e4       	ldi	r27, 0x41	; 65
 4e2:	28 d3       	rcall	.+1616   	; 0xb34 <__muluhisi3>
 4e4:	6b 01       	movw	r12, r22
 4e6:	7c 01       	movw	r14, r24
 4e8:	ac ee       	ldi	r26, 0xEC	; 236
 4ea:	b4 ef       	ldi	r27, 0xF4	; 244
 4ec:	a5 01       	movw	r20, r10
 4ee:	94 01       	movw	r18, r8
 4f0:	2d d3       	rcall	.+1626   	; 0xb4c <__mulohisi3>
 4f2:	dc 01       	movw	r26, r24
 4f4:	cb 01       	movw	r24, r22
 4f6:	8c 0d       	add	r24, r12
 4f8:	9d 1d       	adc	r25, r13
 4fa:	ae 1d       	adc	r26, r14
 4fc:	bf 1d       	adc	r27, r15
 4fe:	b7 ff       	sbrs	r27, 7
 500:	03 c0       	rjmp	.+6      	; 0x508 <do_rand+0x6c>
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	a1 09       	sbc	r26, r1
 506:	b0 48       	sbci	r27, 0x80	; 128
 508:	88 83       	st	Y, r24
 50a:	99 83       	std	Y+1, r25	; 0x01
 50c:	aa 83       	std	Y+2, r26	; 0x02
 50e:	bb 83       	std	Y+3, r27	; 0x03
 510:	9f 77       	andi	r25, 0x7F	; 127
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	cf 90       	pop	r12
 51e:	bf 90       	pop	r11
 520:	af 90       	pop	r10
 522:	9f 90       	pop	r9
 524:	8f 90       	pop	r8
 526:	08 95       	ret

00000528 <rand_r>:
 528:	b9 cf       	rjmp	.-142    	; 0x49c <do_rand>

0000052a <rand>:
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	b6 cf       	rjmp	.-148    	; 0x49c <do_rand>

00000530 <srand>:
 530:	a0 e0       	ldi	r26, 0x00	; 0
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 538:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 53c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 540:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 544:	08 95       	ret

00000546 <sprintf>:
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	2e 97       	sbiw	r28, 0x0e	; 14
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
 55e:	0d 89       	ldd	r16, Y+21	; 0x15
 560:	1e 89       	ldd	r17, Y+22	; 0x16
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	8c 83       	std	Y+4, r24	; 0x04
 566:	1a 83       	std	Y+2, r17	; 0x02
 568:	09 83       	std	Y+1, r16	; 0x01
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	9f e7       	ldi	r25, 0x7F	; 127
 56e:	9e 83       	std	Y+6, r25	; 0x06
 570:	8d 83       	std	Y+5, r24	; 0x05
 572:	ae 01       	movw	r20, r28
 574:	47 5e       	subi	r20, 0xE7	; 231
 576:	5f 4f       	sbci	r21, 0xFF	; 255
 578:	6f 89       	ldd	r22, Y+23	; 0x17
 57a:	78 8d       	ldd	r23, Y+24	; 0x18
 57c:	ce 01       	movw	r24, r28
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	10 d0       	rcall	.+32     	; 0x5a2 <vfprintf>
 582:	ef 81       	ldd	r30, Y+7	; 0x07
 584:	f8 85       	ldd	r31, Y+8	; 0x08
 586:	e0 0f       	add	r30, r16
 588:	f1 1f       	adc	r31, r17
 58a:	10 82       	st	Z, r1
 58c:	2e 96       	adiw	r28, 0x0e	; 14
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <vfprintf>:
 5a2:	2f 92       	push	r2
 5a4:	3f 92       	push	r3
 5a6:	4f 92       	push	r4
 5a8:	5f 92       	push	r5
 5aa:	6f 92       	push	r6
 5ac:	7f 92       	push	r7
 5ae:	8f 92       	push	r8
 5b0:	9f 92       	push	r9
 5b2:	af 92       	push	r10
 5b4:	bf 92       	push	r11
 5b6:	cf 92       	push	r12
 5b8:	df 92       	push	r13
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	2b 97       	sbiw	r28, 0x0b	; 11
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	6c 01       	movw	r12, r24
 5d8:	7b 01       	movw	r14, r22
 5da:	8a 01       	movw	r16, r20
 5dc:	fc 01       	movw	r30, r24
 5de:	17 82       	std	Z+7, r1	; 0x07
 5e0:	16 82       	std	Z+6, r1	; 0x06
 5e2:	83 81       	ldd	r24, Z+3	; 0x03
 5e4:	81 ff       	sbrs	r24, 1
 5e6:	bf c1       	rjmp	.+894    	; 0x966 <vfprintf+0x3c4>
 5e8:	ce 01       	movw	r24, r28
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	3c 01       	movw	r6, r24
 5ee:	f6 01       	movw	r30, r12
 5f0:	93 81       	ldd	r25, Z+3	; 0x03
 5f2:	f7 01       	movw	r30, r14
 5f4:	93 fd       	sbrc	r25, 3
 5f6:	85 91       	lpm	r24, Z+
 5f8:	93 ff       	sbrs	r25, 3
 5fa:	81 91       	ld	r24, Z+
 5fc:	7f 01       	movw	r14, r30
 5fe:	88 23       	and	r24, r24
 600:	09 f4       	brne	.+2      	; 0x604 <vfprintf+0x62>
 602:	ad c1       	rjmp	.+858    	; 0x95e <vfprintf+0x3bc>
 604:	85 32       	cpi	r24, 0x25	; 37
 606:	39 f4       	brne	.+14     	; 0x616 <vfprintf+0x74>
 608:	93 fd       	sbrc	r25, 3
 60a:	85 91       	lpm	r24, Z+
 60c:	93 ff       	sbrs	r25, 3
 60e:	81 91       	ld	r24, Z+
 610:	7f 01       	movw	r14, r30
 612:	85 32       	cpi	r24, 0x25	; 37
 614:	21 f4       	brne	.+8      	; 0x61e <vfprintf+0x7c>
 616:	b6 01       	movw	r22, r12
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	d6 d1       	rcall	.+940    	; 0x9c8 <fputc>
 61c:	e8 cf       	rjmp	.-48     	; 0x5ee <vfprintf+0x4c>
 61e:	91 2c       	mov	r9, r1
 620:	21 2c       	mov	r2, r1
 622:	31 2c       	mov	r3, r1
 624:	ff e1       	ldi	r31, 0x1F	; 31
 626:	f3 15       	cp	r31, r3
 628:	d8 f0       	brcs	.+54     	; 0x660 <vfprintf+0xbe>
 62a:	8b 32       	cpi	r24, 0x2B	; 43
 62c:	79 f0       	breq	.+30     	; 0x64c <vfprintf+0xaa>
 62e:	38 f4       	brcc	.+14     	; 0x63e <vfprintf+0x9c>
 630:	80 32       	cpi	r24, 0x20	; 32
 632:	79 f0       	breq	.+30     	; 0x652 <vfprintf+0xb0>
 634:	83 32       	cpi	r24, 0x23	; 35
 636:	a1 f4       	brne	.+40     	; 0x660 <vfprintf+0xbe>
 638:	23 2d       	mov	r18, r3
 63a:	20 61       	ori	r18, 0x10	; 16
 63c:	1d c0       	rjmp	.+58     	; 0x678 <vfprintf+0xd6>
 63e:	8d 32       	cpi	r24, 0x2D	; 45
 640:	61 f0       	breq	.+24     	; 0x65a <vfprintf+0xb8>
 642:	80 33       	cpi	r24, 0x30	; 48
 644:	69 f4       	brne	.+26     	; 0x660 <vfprintf+0xbe>
 646:	23 2d       	mov	r18, r3
 648:	21 60       	ori	r18, 0x01	; 1
 64a:	16 c0       	rjmp	.+44     	; 0x678 <vfprintf+0xd6>
 64c:	83 2d       	mov	r24, r3
 64e:	82 60       	ori	r24, 0x02	; 2
 650:	38 2e       	mov	r3, r24
 652:	e3 2d       	mov	r30, r3
 654:	e4 60       	ori	r30, 0x04	; 4
 656:	3e 2e       	mov	r3, r30
 658:	2a c0       	rjmp	.+84     	; 0x6ae <vfprintf+0x10c>
 65a:	f3 2d       	mov	r31, r3
 65c:	f8 60       	ori	r31, 0x08	; 8
 65e:	1d c0       	rjmp	.+58     	; 0x69a <vfprintf+0xf8>
 660:	37 fc       	sbrc	r3, 7
 662:	2d c0       	rjmp	.+90     	; 0x6be <vfprintf+0x11c>
 664:	20 ed       	ldi	r18, 0xD0	; 208
 666:	28 0f       	add	r18, r24
 668:	2a 30       	cpi	r18, 0x0A	; 10
 66a:	40 f0       	brcs	.+16     	; 0x67c <vfprintf+0xda>
 66c:	8e 32       	cpi	r24, 0x2E	; 46
 66e:	b9 f4       	brne	.+46     	; 0x69e <vfprintf+0xfc>
 670:	36 fc       	sbrc	r3, 6
 672:	75 c1       	rjmp	.+746    	; 0x95e <vfprintf+0x3bc>
 674:	23 2d       	mov	r18, r3
 676:	20 64       	ori	r18, 0x40	; 64
 678:	32 2e       	mov	r3, r18
 67a:	19 c0       	rjmp	.+50     	; 0x6ae <vfprintf+0x10c>
 67c:	36 fe       	sbrs	r3, 6
 67e:	06 c0       	rjmp	.+12     	; 0x68c <vfprintf+0xea>
 680:	8a e0       	ldi	r24, 0x0A	; 10
 682:	98 9e       	mul	r9, r24
 684:	20 0d       	add	r18, r0
 686:	11 24       	eor	r1, r1
 688:	92 2e       	mov	r9, r18
 68a:	11 c0       	rjmp	.+34     	; 0x6ae <vfprintf+0x10c>
 68c:	ea e0       	ldi	r30, 0x0A	; 10
 68e:	2e 9e       	mul	r2, r30
 690:	20 0d       	add	r18, r0
 692:	11 24       	eor	r1, r1
 694:	22 2e       	mov	r2, r18
 696:	f3 2d       	mov	r31, r3
 698:	f0 62       	ori	r31, 0x20	; 32
 69a:	3f 2e       	mov	r3, r31
 69c:	08 c0       	rjmp	.+16     	; 0x6ae <vfprintf+0x10c>
 69e:	8c 36       	cpi	r24, 0x6C	; 108
 6a0:	21 f4       	brne	.+8      	; 0x6aa <vfprintf+0x108>
 6a2:	83 2d       	mov	r24, r3
 6a4:	80 68       	ori	r24, 0x80	; 128
 6a6:	38 2e       	mov	r3, r24
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <vfprintf+0x10c>
 6aa:	88 36       	cpi	r24, 0x68	; 104
 6ac:	41 f4       	brne	.+16     	; 0x6be <vfprintf+0x11c>
 6ae:	f7 01       	movw	r30, r14
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	7f 01       	movw	r14, r30
 6ba:	81 11       	cpse	r24, r1
 6bc:	b3 cf       	rjmp	.-154    	; 0x624 <vfprintf+0x82>
 6be:	98 2f       	mov	r25, r24
 6c0:	9f 7d       	andi	r25, 0xDF	; 223
 6c2:	95 54       	subi	r25, 0x45	; 69
 6c4:	93 30       	cpi	r25, 0x03	; 3
 6c6:	28 f4       	brcc	.+10     	; 0x6d2 <vfprintf+0x130>
 6c8:	0c 5f       	subi	r16, 0xFC	; 252
 6ca:	1f 4f       	sbci	r17, 0xFF	; 255
 6cc:	9f e3       	ldi	r25, 0x3F	; 63
 6ce:	99 83       	std	Y+1, r25	; 0x01
 6d0:	0d c0       	rjmp	.+26     	; 0x6ec <vfprintf+0x14a>
 6d2:	83 36       	cpi	r24, 0x63	; 99
 6d4:	31 f0       	breq	.+12     	; 0x6e2 <vfprintf+0x140>
 6d6:	83 37       	cpi	r24, 0x73	; 115
 6d8:	71 f0       	breq	.+28     	; 0x6f6 <vfprintf+0x154>
 6da:	83 35       	cpi	r24, 0x53	; 83
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <vfprintf+0x13e>
 6de:	55 c0       	rjmp	.+170    	; 0x78a <vfprintf+0x1e8>
 6e0:	20 c0       	rjmp	.+64     	; 0x722 <vfprintf+0x180>
 6e2:	f8 01       	movw	r30, r16
 6e4:	80 81       	ld	r24, Z
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	0e 5f       	subi	r16, 0xFE	; 254
 6ea:	1f 4f       	sbci	r17, 0xFF	; 255
 6ec:	88 24       	eor	r8, r8
 6ee:	83 94       	inc	r8
 6f0:	91 2c       	mov	r9, r1
 6f2:	53 01       	movw	r10, r6
 6f4:	12 c0       	rjmp	.+36     	; 0x71a <vfprintf+0x178>
 6f6:	28 01       	movw	r4, r16
 6f8:	f2 e0       	ldi	r31, 0x02	; 2
 6fa:	4f 0e       	add	r4, r31
 6fc:	51 1c       	adc	r5, r1
 6fe:	f8 01       	movw	r30, r16
 700:	a0 80       	ld	r10, Z
 702:	b1 80       	ldd	r11, Z+1	; 0x01
 704:	36 fe       	sbrs	r3, 6
 706:	03 c0       	rjmp	.+6      	; 0x70e <vfprintf+0x16c>
 708:	69 2d       	mov	r22, r9
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0x170>
 70e:	6f ef       	ldi	r22, 0xFF	; 255
 710:	7f ef       	ldi	r23, 0xFF	; 255
 712:	c5 01       	movw	r24, r10
 714:	4e d1       	rcall	.+668    	; 0x9b2 <strnlen>
 716:	4c 01       	movw	r8, r24
 718:	82 01       	movw	r16, r4
 71a:	f3 2d       	mov	r31, r3
 71c:	ff 77       	andi	r31, 0x7F	; 127
 71e:	3f 2e       	mov	r3, r31
 720:	15 c0       	rjmp	.+42     	; 0x74c <vfprintf+0x1aa>
 722:	28 01       	movw	r4, r16
 724:	22 e0       	ldi	r18, 0x02	; 2
 726:	42 0e       	add	r4, r18
 728:	51 1c       	adc	r5, r1
 72a:	f8 01       	movw	r30, r16
 72c:	a0 80       	ld	r10, Z
 72e:	b1 80       	ldd	r11, Z+1	; 0x01
 730:	36 fe       	sbrs	r3, 6
 732:	03 c0       	rjmp	.+6      	; 0x73a <vfprintf+0x198>
 734:	69 2d       	mov	r22, r9
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <vfprintf+0x19c>
 73a:	6f ef       	ldi	r22, 0xFF	; 255
 73c:	7f ef       	ldi	r23, 0xFF	; 255
 73e:	c5 01       	movw	r24, r10
 740:	2d d1       	rcall	.+602    	; 0x99c <strnlen_P>
 742:	4c 01       	movw	r8, r24
 744:	f3 2d       	mov	r31, r3
 746:	f0 68       	ori	r31, 0x80	; 128
 748:	3f 2e       	mov	r3, r31
 74a:	82 01       	movw	r16, r4
 74c:	33 fc       	sbrc	r3, 3
 74e:	19 c0       	rjmp	.+50     	; 0x782 <vfprintf+0x1e0>
 750:	82 2d       	mov	r24, r2
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	88 16       	cp	r8, r24
 756:	99 06       	cpc	r9, r25
 758:	a0 f4       	brcc	.+40     	; 0x782 <vfprintf+0x1e0>
 75a:	b6 01       	movw	r22, r12
 75c:	80 e2       	ldi	r24, 0x20	; 32
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	33 d1       	rcall	.+614    	; 0x9c8 <fputc>
 762:	2a 94       	dec	r2
 764:	f5 cf       	rjmp	.-22     	; 0x750 <vfprintf+0x1ae>
 766:	f5 01       	movw	r30, r10
 768:	37 fc       	sbrc	r3, 7
 76a:	85 91       	lpm	r24, Z+
 76c:	37 fe       	sbrs	r3, 7
 76e:	81 91       	ld	r24, Z+
 770:	5f 01       	movw	r10, r30
 772:	b6 01       	movw	r22, r12
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	28 d1       	rcall	.+592    	; 0x9c8 <fputc>
 778:	21 10       	cpse	r2, r1
 77a:	2a 94       	dec	r2
 77c:	21 e0       	ldi	r18, 0x01	; 1
 77e:	82 1a       	sub	r8, r18
 780:	91 08       	sbc	r9, r1
 782:	81 14       	cp	r8, r1
 784:	91 04       	cpc	r9, r1
 786:	79 f7       	brne	.-34     	; 0x766 <vfprintf+0x1c4>
 788:	e1 c0       	rjmp	.+450    	; 0x94c <vfprintf+0x3aa>
 78a:	84 36       	cpi	r24, 0x64	; 100
 78c:	11 f0       	breq	.+4      	; 0x792 <vfprintf+0x1f0>
 78e:	89 36       	cpi	r24, 0x69	; 105
 790:	39 f5       	brne	.+78     	; 0x7e0 <vfprintf+0x23e>
 792:	f8 01       	movw	r30, r16
 794:	37 fe       	sbrs	r3, 7
 796:	07 c0       	rjmp	.+14     	; 0x7a6 <vfprintf+0x204>
 798:	60 81       	ld	r22, Z
 79a:	71 81       	ldd	r23, Z+1	; 0x01
 79c:	82 81       	ldd	r24, Z+2	; 0x02
 79e:	93 81       	ldd	r25, Z+3	; 0x03
 7a0:	0c 5f       	subi	r16, 0xFC	; 252
 7a2:	1f 4f       	sbci	r17, 0xFF	; 255
 7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <vfprintf+0x214>
 7a6:	60 81       	ld	r22, Z
 7a8:	71 81       	ldd	r23, Z+1	; 0x01
 7aa:	07 2e       	mov	r0, r23
 7ac:	00 0c       	add	r0, r0
 7ae:	88 0b       	sbc	r24, r24
 7b0:	99 0b       	sbc	r25, r25
 7b2:	0e 5f       	subi	r16, 0xFE	; 254
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	f3 2d       	mov	r31, r3
 7b8:	ff 76       	andi	r31, 0x6F	; 111
 7ba:	3f 2e       	mov	r3, r31
 7bc:	97 ff       	sbrs	r25, 7
 7be:	09 c0       	rjmp	.+18     	; 0x7d2 <vfprintf+0x230>
 7c0:	90 95       	com	r25
 7c2:	80 95       	com	r24
 7c4:	70 95       	com	r23
 7c6:	61 95       	neg	r22
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	8f 4f       	sbci	r24, 0xFF	; 255
 7cc:	9f 4f       	sbci	r25, 0xFF	; 255
 7ce:	f0 68       	ori	r31, 0x80	; 128
 7d0:	3f 2e       	mov	r3, r31
 7d2:	2a e0       	ldi	r18, 0x0A	; 10
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	a3 01       	movw	r20, r6
 7d8:	33 d1       	rcall	.+614    	; 0xa40 <__ultoa_invert>
 7da:	88 2e       	mov	r8, r24
 7dc:	86 18       	sub	r8, r6
 7de:	44 c0       	rjmp	.+136    	; 0x868 <vfprintf+0x2c6>
 7e0:	85 37       	cpi	r24, 0x75	; 117
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <vfprintf+0x24e>
 7e4:	23 2d       	mov	r18, r3
 7e6:	2f 7e       	andi	r18, 0xEF	; 239
 7e8:	b2 2e       	mov	r11, r18
 7ea:	2a e0       	ldi	r18, 0x0A	; 10
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	25 c0       	rjmp	.+74     	; 0x83a <vfprintf+0x298>
 7f0:	93 2d       	mov	r25, r3
 7f2:	99 7f       	andi	r25, 0xF9	; 249
 7f4:	b9 2e       	mov	r11, r25
 7f6:	8f 36       	cpi	r24, 0x6F	; 111
 7f8:	c1 f0       	breq	.+48     	; 0x82a <vfprintf+0x288>
 7fa:	18 f4       	brcc	.+6      	; 0x802 <vfprintf+0x260>
 7fc:	88 35       	cpi	r24, 0x58	; 88
 7fe:	79 f0       	breq	.+30     	; 0x81e <vfprintf+0x27c>
 800:	ae c0       	rjmp	.+348    	; 0x95e <vfprintf+0x3bc>
 802:	80 37       	cpi	r24, 0x70	; 112
 804:	19 f0       	breq	.+6      	; 0x80c <vfprintf+0x26a>
 806:	88 37       	cpi	r24, 0x78	; 120
 808:	21 f0       	breq	.+8      	; 0x812 <vfprintf+0x270>
 80a:	a9 c0       	rjmp	.+338    	; 0x95e <vfprintf+0x3bc>
 80c:	e9 2f       	mov	r30, r25
 80e:	e0 61       	ori	r30, 0x10	; 16
 810:	be 2e       	mov	r11, r30
 812:	b4 fe       	sbrs	r11, 4
 814:	0d c0       	rjmp	.+26     	; 0x830 <vfprintf+0x28e>
 816:	fb 2d       	mov	r31, r11
 818:	f4 60       	ori	r31, 0x04	; 4
 81a:	bf 2e       	mov	r11, r31
 81c:	09 c0       	rjmp	.+18     	; 0x830 <vfprintf+0x28e>
 81e:	34 fe       	sbrs	r3, 4
 820:	0a c0       	rjmp	.+20     	; 0x836 <vfprintf+0x294>
 822:	29 2f       	mov	r18, r25
 824:	26 60       	ori	r18, 0x06	; 6
 826:	b2 2e       	mov	r11, r18
 828:	06 c0       	rjmp	.+12     	; 0x836 <vfprintf+0x294>
 82a:	28 e0       	ldi	r18, 0x08	; 8
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	05 c0       	rjmp	.+10     	; 0x83a <vfprintf+0x298>
 830:	20 e1       	ldi	r18, 0x10	; 16
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	02 c0       	rjmp	.+4      	; 0x83a <vfprintf+0x298>
 836:	20 e1       	ldi	r18, 0x10	; 16
 838:	32 e0       	ldi	r19, 0x02	; 2
 83a:	f8 01       	movw	r30, r16
 83c:	b7 fe       	sbrs	r11, 7
 83e:	07 c0       	rjmp	.+14     	; 0x84e <vfprintf+0x2ac>
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	82 81       	ldd	r24, Z+2	; 0x02
 846:	93 81       	ldd	r25, Z+3	; 0x03
 848:	0c 5f       	subi	r16, 0xFC	; 252
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	06 c0       	rjmp	.+12     	; 0x85a <vfprintf+0x2b8>
 84e:	60 81       	ld	r22, Z
 850:	71 81       	ldd	r23, Z+1	; 0x01
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 5f       	subi	r16, 0xFE	; 254
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	a3 01       	movw	r20, r6
 85c:	f1 d0       	rcall	.+482    	; 0xa40 <__ultoa_invert>
 85e:	88 2e       	mov	r8, r24
 860:	86 18       	sub	r8, r6
 862:	fb 2d       	mov	r31, r11
 864:	ff 77       	andi	r31, 0x7F	; 127
 866:	3f 2e       	mov	r3, r31
 868:	36 fe       	sbrs	r3, 6
 86a:	0d c0       	rjmp	.+26     	; 0x886 <vfprintf+0x2e4>
 86c:	23 2d       	mov	r18, r3
 86e:	2e 7f       	andi	r18, 0xFE	; 254
 870:	a2 2e       	mov	r10, r18
 872:	89 14       	cp	r8, r9
 874:	58 f4       	brcc	.+22     	; 0x88c <vfprintf+0x2ea>
 876:	34 fe       	sbrs	r3, 4
 878:	0b c0       	rjmp	.+22     	; 0x890 <vfprintf+0x2ee>
 87a:	32 fc       	sbrc	r3, 2
 87c:	09 c0       	rjmp	.+18     	; 0x890 <vfprintf+0x2ee>
 87e:	83 2d       	mov	r24, r3
 880:	8e 7e       	andi	r24, 0xEE	; 238
 882:	a8 2e       	mov	r10, r24
 884:	05 c0       	rjmp	.+10     	; 0x890 <vfprintf+0x2ee>
 886:	b8 2c       	mov	r11, r8
 888:	a3 2c       	mov	r10, r3
 88a:	03 c0       	rjmp	.+6      	; 0x892 <vfprintf+0x2f0>
 88c:	b8 2c       	mov	r11, r8
 88e:	01 c0       	rjmp	.+2      	; 0x892 <vfprintf+0x2f0>
 890:	b9 2c       	mov	r11, r9
 892:	a4 fe       	sbrs	r10, 4
 894:	0f c0       	rjmp	.+30     	; 0x8b4 <vfprintf+0x312>
 896:	fe 01       	movw	r30, r28
 898:	e8 0d       	add	r30, r8
 89a:	f1 1d       	adc	r31, r1
 89c:	80 81       	ld	r24, Z
 89e:	80 33       	cpi	r24, 0x30	; 48
 8a0:	21 f4       	brne	.+8      	; 0x8aa <vfprintf+0x308>
 8a2:	9a 2d       	mov	r25, r10
 8a4:	99 7e       	andi	r25, 0xE9	; 233
 8a6:	a9 2e       	mov	r10, r25
 8a8:	09 c0       	rjmp	.+18     	; 0x8bc <vfprintf+0x31a>
 8aa:	a2 fe       	sbrs	r10, 2
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <vfprintf+0x318>
 8ae:	b3 94       	inc	r11
 8b0:	b3 94       	inc	r11
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <vfprintf+0x31a>
 8b4:	8a 2d       	mov	r24, r10
 8b6:	86 78       	andi	r24, 0x86	; 134
 8b8:	09 f0       	breq	.+2      	; 0x8bc <vfprintf+0x31a>
 8ba:	b3 94       	inc	r11
 8bc:	a3 fc       	sbrc	r10, 3
 8be:	10 c0       	rjmp	.+32     	; 0x8e0 <vfprintf+0x33e>
 8c0:	a0 fe       	sbrs	r10, 0
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <vfprintf+0x32e>
 8c4:	b2 14       	cp	r11, r2
 8c6:	80 f4       	brcc	.+32     	; 0x8e8 <vfprintf+0x346>
 8c8:	28 0c       	add	r2, r8
 8ca:	92 2c       	mov	r9, r2
 8cc:	9b 18       	sub	r9, r11
 8ce:	0d c0       	rjmp	.+26     	; 0x8ea <vfprintf+0x348>
 8d0:	b2 14       	cp	r11, r2
 8d2:	58 f4       	brcc	.+22     	; 0x8ea <vfprintf+0x348>
 8d4:	b6 01       	movw	r22, r12
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	76 d0       	rcall	.+236    	; 0x9c8 <fputc>
 8dc:	b3 94       	inc	r11
 8de:	f8 cf       	rjmp	.-16     	; 0x8d0 <vfprintf+0x32e>
 8e0:	b2 14       	cp	r11, r2
 8e2:	18 f4       	brcc	.+6      	; 0x8ea <vfprintf+0x348>
 8e4:	2b 18       	sub	r2, r11
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x34a>
 8e8:	98 2c       	mov	r9, r8
 8ea:	21 2c       	mov	r2, r1
 8ec:	a4 fe       	sbrs	r10, 4
 8ee:	0f c0       	rjmp	.+30     	; 0x90e <vfprintf+0x36c>
 8f0:	b6 01       	movw	r22, r12
 8f2:	80 e3       	ldi	r24, 0x30	; 48
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	68 d0       	rcall	.+208    	; 0x9c8 <fputc>
 8f8:	a2 fe       	sbrs	r10, 2
 8fa:	16 c0       	rjmp	.+44     	; 0x928 <vfprintf+0x386>
 8fc:	a1 fc       	sbrc	r10, 1
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <vfprintf+0x364>
 900:	88 e7       	ldi	r24, 0x78	; 120
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <vfprintf+0x368>
 906:	88 e5       	ldi	r24, 0x58	; 88
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	b6 01       	movw	r22, r12
 90c:	0c c0       	rjmp	.+24     	; 0x926 <vfprintf+0x384>
 90e:	8a 2d       	mov	r24, r10
 910:	86 78       	andi	r24, 0x86	; 134
 912:	51 f0       	breq	.+20     	; 0x928 <vfprintf+0x386>
 914:	a1 fe       	sbrs	r10, 1
 916:	02 c0       	rjmp	.+4      	; 0x91c <vfprintf+0x37a>
 918:	8b e2       	ldi	r24, 0x2B	; 43
 91a:	01 c0       	rjmp	.+2      	; 0x91e <vfprintf+0x37c>
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	a7 fc       	sbrc	r10, 7
 920:	8d e2       	ldi	r24, 0x2D	; 45
 922:	b6 01       	movw	r22, r12
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	50 d0       	rcall	.+160    	; 0x9c8 <fputc>
 928:	89 14       	cp	r8, r9
 92a:	30 f4       	brcc	.+12     	; 0x938 <vfprintf+0x396>
 92c:	b6 01       	movw	r22, r12
 92e:	80 e3       	ldi	r24, 0x30	; 48
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	4a d0       	rcall	.+148    	; 0x9c8 <fputc>
 934:	9a 94       	dec	r9
 936:	f8 cf       	rjmp	.-16     	; 0x928 <vfprintf+0x386>
 938:	8a 94       	dec	r8
 93a:	f3 01       	movw	r30, r6
 93c:	e8 0d       	add	r30, r8
 93e:	f1 1d       	adc	r31, r1
 940:	80 81       	ld	r24, Z
 942:	b6 01       	movw	r22, r12
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	40 d0       	rcall	.+128    	; 0x9c8 <fputc>
 948:	81 10       	cpse	r8, r1
 94a:	f6 cf       	rjmp	.-20     	; 0x938 <vfprintf+0x396>
 94c:	22 20       	and	r2, r2
 94e:	09 f4       	brne	.+2      	; 0x952 <vfprintf+0x3b0>
 950:	4e ce       	rjmp	.-868    	; 0x5ee <vfprintf+0x4c>
 952:	b6 01       	movw	r22, r12
 954:	80 e2       	ldi	r24, 0x20	; 32
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	37 d0       	rcall	.+110    	; 0x9c8 <fputc>
 95a:	2a 94       	dec	r2
 95c:	f7 cf       	rjmp	.-18     	; 0x94c <vfprintf+0x3aa>
 95e:	f6 01       	movw	r30, r12
 960:	86 81       	ldd	r24, Z+6	; 0x06
 962:	97 81       	ldd	r25, Z+7	; 0x07
 964:	02 c0       	rjmp	.+4      	; 0x96a <vfprintf+0x3c8>
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	9f ef       	ldi	r25, 0xFF	; 255
 96a:	2b 96       	adiw	r28, 0x0b	; 11
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	f8 94       	cli
 970:	de bf       	out	0x3e, r29	; 62
 972:	0f be       	out	0x3f, r0	; 63
 974:	cd bf       	out	0x3d, r28	; 61
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	ff 90       	pop	r15
 980:	ef 90       	pop	r14
 982:	df 90       	pop	r13
 984:	cf 90       	pop	r12
 986:	bf 90       	pop	r11
 988:	af 90       	pop	r10
 98a:	9f 90       	pop	r9
 98c:	8f 90       	pop	r8
 98e:	7f 90       	pop	r7
 990:	6f 90       	pop	r6
 992:	5f 90       	pop	r5
 994:	4f 90       	pop	r4
 996:	3f 90       	pop	r3
 998:	2f 90       	pop	r2
 99a:	08 95       	ret

0000099c <strnlen_P>:
 99c:	fc 01       	movw	r30, r24
 99e:	05 90       	lpm	r0, Z+
 9a0:	61 50       	subi	r22, 0x01	; 1
 9a2:	70 40       	sbci	r23, 0x00	; 0
 9a4:	01 10       	cpse	r0, r1
 9a6:	d8 f7       	brcc	.-10     	; 0x99e <strnlen_P+0x2>
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	8e 0f       	add	r24, r30
 9ae:	9f 1f       	adc	r25, r31
 9b0:	08 95       	ret

000009b2 <strnlen>:
 9b2:	fc 01       	movw	r30, r24
 9b4:	61 50       	subi	r22, 0x01	; 1
 9b6:	70 40       	sbci	r23, 0x00	; 0
 9b8:	01 90       	ld	r0, Z+
 9ba:	01 10       	cpse	r0, r1
 9bc:	d8 f7       	brcc	.-10     	; 0x9b4 <strnlen+0x2>
 9be:	80 95       	com	r24
 9c0:	90 95       	com	r25
 9c2:	8e 0f       	add	r24, r30
 9c4:	9f 1f       	adc	r25, r31
 9c6:	08 95       	ret

000009c8 <fputc>:
 9c8:	0f 93       	push	r16
 9ca:	1f 93       	push	r17
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
 9d0:	fb 01       	movw	r30, r22
 9d2:	23 81       	ldd	r18, Z+3	; 0x03
 9d4:	21 fd       	sbrc	r18, 1
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <fputc+0x16>
 9d8:	8f ef       	ldi	r24, 0xFF	; 255
 9da:	9f ef       	ldi	r25, 0xFF	; 255
 9dc:	2c c0       	rjmp	.+88     	; 0xa36 <fputc+0x6e>
 9de:	22 ff       	sbrs	r18, 2
 9e0:	16 c0       	rjmp	.+44     	; 0xa0e <fputc+0x46>
 9e2:	46 81       	ldd	r20, Z+6	; 0x06
 9e4:	57 81       	ldd	r21, Z+7	; 0x07
 9e6:	24 81       	ldd	r18, Z+4	; 0x04
 9e8:	35 81       	ldd	r19, Z+5	; 0x05
 9ea:	42 17       	cp	r20, r18
 9ec:	53 07       	cpc	r21, r19
 9ee:	44 f4       	brge	.+16     	; 0xa00 <fputc+0x38>
 9f0:	a0 81       	ld	r26, Z
 9f2:	b1 81       	ldd	r27, Z+1	; 0x01
 9f4:	9d 01       	movw	r18, r26
 9f6:	2f 5f       	subi	r18, 0xFF	; 255
 9f8:	3f 4f       	sbci	r19, 0xFF	; 255
 9fa:	31 83       	std	Z+1, r19	; 0x01
 9fc:	20 83       	st	Z, r18
 9fe:	8c 93       	st	X, r24
 a00:	26 81       	ldd	r18, Z+6	; 0x06
 a02:	37 81       	ldd	r19, Z+7	; 0x07
 a04:	2f 5f       	subi	r18, 0xFF	; 255
 a06:	3f 4f       	sbci	r19, 0xFF	; 255
 a08:	37 83       	std	Z+7, r19	; 0x07
 a0a:	26 83       	std	Z+6, r18	; 0x06
 a0c:	14 c0       	rjmp	.+40     	; 0xa36 <fputc+0x6e>
 a0e:	8b 01       	movw	r16, r22
 a10:	ec 01       	movw	r28, r24
 a12:	fb 01       	movw	r30, r22
 a14:	00 84       	ldd	r0, Z+8	; 0x08
 a16:	f1 85       	ldd	r31, Z+9	; 0x09
 a18:	e0 2d       	mov	r30, r0
 a1a:	09 95       	icall
 a1c:	89 2b       	or	r24, r25
 a1e:	e1 f6       	brne	.-72     	; 0x9d8 <fputc+0x10>
 a20:	d8 01       	movw	r26, r16
 a22:	16 96       	adiw	r26, 0x06	; 6
 a24:	8d 91       	ld	r24, X+
 a26:	9c 91       	ld	r25, X
 a28:	17 97       	sbiw	r26, 0x07	; 7
 a2a:	01 96       	adiw	r24, 0x01	; 1
 a2c:	17 96       	adiw	r26, 0x07	; 7
 a2e:	9c 93       	st	X, r25
 a30:	8e 93       	st	-X, r24
 a32:	16 97       	sbiw	r26, 0x06	; 6
 a34:	ce 01       	movw	r24, r28
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	1f 91       	pop	r17
 a3c:	0f 91       	pop	r16
 a3e:	08 95       	ret

00000a40 <__ultoa_invert>:
 a40:	fa 01       	movw	r30, r20
 a42:	aa 27       	eor	r26, r26
 a44:	28 30       	cpi	r18, 0x08	; 8
 a46:	51 f1       	breq	.+84     	; 0xa9c <__ultoa_invert+0x5c>
 a48:	20 31       	cpi	r18, 0x10	; 16
 a4a:	81 f1       	breq	.+96     	; 0xaac <__ultoa_invert+0x6c>
 a4c:	e8 94       	clt
 a4e:	6f 93       	push	r22
 a50:	6e 7f       	andi	r22, 0xFE	; 254
 a52:	6e 5f       	subi	r22, 0xFE	; 254
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	8f 4f       	sbci	r24, 0xFF	; 255
 a58:	9f 4f       	sbci	r25, 0xFF	; 255
 a5a:	af 4f       	sbci	r26, 0xFF	; 255
 a5c:	b1 e0       	ldi	r27, 0x01	; 1
 a5e:	3e d0       	rcall	.+124    	; 0xadc <__ultoa_invert+0x9c>
 a60:	b4 e0       	ldi	r27, 0x04	; 4
 a62:	3c d0       	rcall	.+120    	; 0xadc <__ultoa_invert+0x9c>
 a64:	67 0f       	add	r22, r23
 a66:	78 1f       	adc	r23, r24
 a68:	89 1f       	adc	r24, r25
 a6a:	9a 1f       	adc	r25, r26
 a6c:	a1 1d       	adc	r26, r1
 a6e:	68 0f       	add	r22, r24
 a70:	79 1f       	adc	r23, r25
 a72:	8a 1f       	adc	r24, r26
 a74:	91 1d       	adc	r25, r1
 a76:	a1 1d       	adc	r26, r1
 a78:	6a 0f       	add	r22, r26
 a7a:	71 1d       	adc	r23, r1
 a7c:	81 1d       	adc	r24, r1
 a7e:	91 1d       	adc	r25, r1
 a80:	a1 1d       	adc	r26, r1
 a82:	20 d0       	rcall	.+64     	; 0xac4 <__ultoa_invert+0x84>
 a84:	09 f4       	brne	.+2      	; 0xa88 <__ultoa_invert+0x48>
 a86:	68 94       	set
 a88:	3f 91       	pop	r19
 a8a:	2a e0       	ldi	r18, 0x0A	; 10
 a8c:	26 9f       	mul	r18, r22
 a8e:	11 24       	eor	r1, r1
 a90:	30 19       	sub	r19, r0
 a92:	30 5d       	subi	r19, 0xD0	; 208
 a94:	31 93       	st	Z+, r19
 a96:	de f6       	brtc	.-74     	; 0xa4e <__ultoa_invert+0xe>
 a98:	cf 01       	movw	r24, r30
 a9a:	08 95       	ret
 a9c:	46 2f       	mov	r20, r22
 a9e:	47 70       	andi	r20, 0x07	; 7
 aa0:	40 5d       	subi	r20, 0xD0	; 208
 aa2:	41 93       	st	Z+, r20
 aa4:	b3 e0       	ldi	r27, 0x03	; 3
 aa6:	0f d0       	rcall	.+30     	; 0xac6 <__ultoa_invert+0x86>
 aa8:	c9 f7       	brne	.-14     	; 0xa9c <__ultoa_invert+0x5c>
 aaa:	f6 cf       	rjmp	.-20     	; 0xa98 <__ultoa_invert+0x58>
 aac:	46 2f       	mov	r20, r22
 aae:	4f 70       	andi	r20, 0x0F	; 15
 ab0:	40 5d       	subi	r20, 0xD0	; 208
 ab2:	4a 33       	cpi	r20, 0x3A	; 58
 ab4:	18 f0       	brcs	.+6      	; 0xabc <__ultoa_invert+0x7c>
 ab6:	49 5d       	subi	r20, 0xD9	; 217
 ab8:	31 fd       	sbrc	r19, 1
 aba:	40 52       	subi	r20, 0x20	; 32
 abc:	41 93       	st	Z+, r20
 abe:	02 d0       	rcall	.+4      	; 0xac4 <__ultoa_invert+0x84>
 ac0:	a9 f7       	brne	.-22     	; 0xaac <__ultoa_invert+0x6c>
 ac2:	ea cf       	rjmp	.-44     	; 0xa98 <__ultoa_invert+0x58>
 ac4:	b4 e0       	ldi	r27, 0x04	; 4
 ac6:	a6 95       	lsr	r26
 ac8:	97 95       	ror	r25
 aca:	87 95       	ror	r24
 acc:	77 95       	ror	r23
 ace:	67 95       	ror	r22
 ad0:	ba 95       	dec	r27
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__ultoa_invert+0x86>
 ad4:	00 97       	sbiw	r24, 0x00	; 0
 ad6:	61 05       	cpc	r22, r1
 ad8:	71 05       	cpc	r23, r1
 ada:	08 95       	ret
 adc:	9b 01       	movw	r18, r22
 ade:	ac 01       	movw	r20, r24
 ae0:	0a 2e       	mov	r0, r26
 ae2:	06 94       	lsr	r0
 ae4:	57 95       	ror	r21
 ae6:	47 95       	ror	r20
 ae8:	37 95       	ror	r19
 aea:	27 95       	ror	r18
 aec:	ba 95       	dec	r27
 aee:	c9 f7       	brne	.-14     	; 0xae2 <__ultoa_invert+0xa2>
 af0:	62 0f       	add	r22, r18
 af2:	73 1f       	adc	r23, r19
 af4:	84 1f       	adc	r24, r20
 af6:	95 1f       	adc	r25, r21
 af8:	a0 1d       	adc	r26, r0
 afa:	08 95       	ret

00000afc <__divmodsi4>:
 afc:	05 2e       	mov	r0, r21
 afe:	97 fb       	bst	r25, 7
 b00:	16 f4       	brtc	.+4      	; 0xb06 <__divmodsi4+0xa>
 b02:	00 94       	com	r0
 b04:	0f d0       	rcall	.+30     	; 0xb24 <__negsi2>
 b06:	57 fd       	sbrc	r21, 7
 b08:	05 d0       	rcall	.+10     	; 0xb14 <__divmodsi4_neg2>
 b0a:	24 d0       	rcall	.+72     	; 0xb54 <__udivmodsi4>
 b0c:	07 fc       	sbrc	r0, 7
 b0e:	02 d0       	rcall	.+4      	; 0xb14 <__divmodsi4_neg2>
 b10:	46 f4       	brtc	.+16     	; 0xb22 <__divmodsi4_exit>
 b12:	08 c0       	rjmp	.+16     	; 0xb24 <__negsi2>

00000b14 <__divmodsi4_neg2>:
 b14:	50 95       	com	r21
 b16:	40 95       	com	r20
 b18:	30 95       	com	r19
 b1a:	21 95       	neg	r18
 b1c:	3f 4f       	sbci	r19, 0xFF	; 255
 b1e:	4f 4f       	sbci	r20, 0xFF	; 255
 b20:	5f 4f       	sbci	r21, 0xFF	; 255

00000b22 <__divmodsi4_exit>:
 b22:	08 95       	ret

00000b24 <__negsi2>:
 b24:	90 95       	com	r25
 b26:	80 95       	com	r24
 b28:	70 95       	com	r23
 b2a:	61 95       	neg	r22
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	08 95       	ret

00000b34 <__muluhisi3>:
 b34:	31 d0       	rcall	.+98     	; 0xb98 <__umulhisi3>
 b36:	a5 9f       	mul	r26, r21
 b38:	90 0d       	add	r25, r0
 b3a:	b4 9f       	mul	r27, r20
 b3c:	90 0d       	add	r25, r0
 b3e:	a4 9f       	mul	r26, r20
 b40:	80 0d       	add	r24, r0
 b42:	91 1d       	adc	r25, r1
 b44:	11 24       	eor	r1, r1
 b46:	08 95       	ret

00000b48 <__mulshisi3>:
 b48:	b7 ff       	sbrs	r27, 7
 b4a:	f4 cf       	rjmp	.-24     	; 0xb34 <__muluhisi3>

00000b4c <__mulohisi3>:
 b4c:	f3 df       	rcall	.-26     	; 0xb34 <__muluhisi3>
 b4e:	82 1b       	sub	r24, r18
 b50:	93 0b       	sbc	r25, r19
 b52:	08 95       	ret

00000b54 <__udivmodsi4>:
 b54:	a1 e2       	ldi	r26, 0x21	; 33
 b56:	1a 2e       	mov	r1, r26
 b58:	aa 1b       	sub	r26, r26
 b5a:	bb 1b       	sub	r27, r27
 b5c:	fd 01       	movw	r30, r26
 b5e:	0d c0       	rjmp	.+26     	; 0xb7a <__udivmodsi4_ep>

00000b60 <__udivmodsi4_loop>:
 b60:	aa 1f       	adc	r26, r26
 b62:	bb 1f       	adc	r27, r27
 b64:	ee 1f       	adc	r30, r30
 b66:	ff 1f       	adc	r31, r31
 b68:	a2 17       	cp	r26, r18
 b6a:	b3 07       	cpc	r27, r19
 b6c:	e4 07       	cpc	r30, r20
 b6e:	f5 07       	cpc	r31, r21
 b70:	20 f0       	brcs	.+8      	; 0xb7a <__udivmodsi4_ep>
 b72:	a2 1b       	sub	r26, r18
 b74:	b3 0b       	sbc	r27, r19
 b76:	e4 0b       	sbc	r30, r20
 b78:	f5 0b       	sbc	r31, r21

00000b7a <__udivmodsi4_ep>:
 b7a:	66 1f       	adc	r22, r22
 b7c:	77 1f       	adc	r23, r23
 b7e:	88 1f       	adc	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	1a 94       	dec	r1
 b84:	69 f7       	brne	.-38     	; 0xb60 <__udivmodsi4_loop>
 b86:	60 95       	com	r22
 b88:	70 95       	com	r23
 b8a:	80 95       	com	r24
 b8c:	90 95       	com	r25
 b8e:	9b 01       	movw	r18, r22
 b90:	ac 01       	movw	r20, r24
 b92:	bd 01       	movw	r22, r26
 b94:	cf 01       	movw	r24, r30
 b96:	08 95       	ret

00000b98 <__umulhisi3>:
 b98:	a2 9f       	mul	r26, r18
 b9a:	b0 01       	movw	r22, r0
 b9c:	b3 9f       	mul	r27, r19
 b9e:	c0 01       	movw	r24, r0
 ba0:	a3 9f       	mul	r26, r19
 ba2:	70 0d       	add	r23, r0
 ba4:	81 1d       	adc	r24, r1
 ba6:	11 24       	eor	r1, r1
 ba8:	91 1d       	adc	r25, r1
 baa:	b2 9f       	mul	r27, r18
 bac:	70 0d       	add	r23, r0
 bae:	81 1d       	adc	r24, r1
 bb0:	11 24       	eor	r1, r1
 bb2:	91 1d       	adc	r25, r1
 bb4:	08 95       	ret

00000bb6 <_exit>:
 bb6:	f8 94       	cli

00000bb8 <__stop_program>:
 bb8:	ff cf       	rjmp	.-2      	; 0xbb8 <__stop_program>
